import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MintInfo, MintInfoT } from '../../nostr/fb/mint-info.js';


export class Kind10019Parsed implements flatbuffers.IUnpackableObject<Kind10019ParsedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Kind10019Parsed {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKind10019Parsed(bb:flatbuffers.ByteBuffer, obj?:Kind10019Parsed):Kind10019Parsed {
  return (obj || new Kind10019Parsed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKind10019Parsed(bb:flatbuffers.ByteBuffer, obj?:Kind10019Parsed):Kind10019Parsed {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Kind10019Parsed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

trustedMints(index: number, obj?:MintInfo):MintInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MintInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

trustedMintsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

p2pkPubkey(): ByteString|null
p2pkPubkey(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
p2pkPubkey(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

readRelays(index: number): ByteString
readRelays(index: number,optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array
readRelays(index: number,optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

readRelaysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startKind10019Parsed(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTrustedMints(builder:flatbuffers.Builder, trustedMintsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, trustedMintsOffset, 0);
}

static createTrustedMintsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTrustedMintsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addP2pkPubkey(builder:flatbuffers.Builder, p2pkPubkeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, p2pkPubkeyOffset, 0);
}

static addReadRelays(builder:flatbuffers.Builder, readRelaysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, readRelaysOffset, 0);
}

static createReadRelaysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startReadRelaysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endKind10019Parsed(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createKind10019Parsed(builder:flatbuffers.Builder, trustedMintsOffset:flatbuffers.Offset, p2pkPubkeyOffset:flatbuffers.Offset, readRelaysOffset:flatbuffers.Offset):flatbuffers.Offset {
  Kind10019Parsed.startKind10019Parsed(builder);
  Kind10019Parsed.addTrustedMints(builder, trustedMintsOffset);
  Kind10019Parsed.addP2pkPubkey(builder, p2pkPubkeyOffset);
  Kind10019Parsed.addReadRelays(builder, readRelaysOffset);
  return Kind10019Parsed.endKind10019Parsed(builder);
}

unpack(): Kind10019ParsedT {
  return new Kind10019ParsedT(
    this.bb!.createObjList<MintInfo, MintInfoT>(this.trustedMints.bind(this), this.trustedMintsLength()),
    this.p2pkPubkey(),
    this.bb!.createScalarList<string>(this.readRelays.bind(this), this.readRelaysLength())
  );
}


unpackTo(_o: Kind10019ParsedT): void {
  _o.trustedMints = this.bb!.createObjList<MintInfo, MintInfoT>(this.trustedMints.bind(this), this.trustedMintsLength());
  _o.p2pkPubkey = this.p2pkPubkey();
  _o.readRelays = this.bb!.createScalarList<string>(this.readRelays.bind(this), this.readRelaysLength());
}
}

export class Kind10019ParsedT implements flatbuffers.IGeneratedObject {
constructor(
  public trustedMints: (MintInfoT)[] = [],
  public p2pkPubkey: ByteString|Uint8Array|null = null,
  public readRelays: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const trustedMints = Kind10019Parsed.createTrustedMintsVector(builder, builder.createObjectOffsetList(this.trustedMints));
  const p2pkPubkey = (this.p2pkPubkey !== null ? builder.createString(this.p2pkPubkey!) : 0);
  const readRelays = Kind10019Parsed.createReadRelaysVector(builder, builder.createObjectOffsetList(this.readRelays));

  return Kind10019Parsed.createKind10019Parsed(builder,
    trustedMints,
    p2pkPubkey,
    readRelays
  );
}
}
