import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ContentBlock, ContentBlockT } from '../../nostr/fb/content-block.js';


export class Kind4Parsed implements flatbuffers.IUnpackableObject<Kind4ParsedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Kind4Parsed {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKind4Parsed(bb:flatbuffers.ByteBuffer, obj?:Kind4Parsed):Kind4Parsed {
  return (obj || new Kind4Parsed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKind4Parsed(bb:flatbuffers.ByteBuffer, obj?:Kind4Parsed):Kind4Parsed {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Kind4Parsed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

parsedContent(index: number, obj?:ContentBlock):ContentBlock|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContentBlock()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

parsedContentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

decryptedContent(): ByteString|null
decryptedContent(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
decryptedContent(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

chatId(): ByteString|null
chatId(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
chatId(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

recipient(): ByteString|null
recipient(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
recipient(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startKind4Parsed(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addParsedContent(builder:flatbuffers.Builder, parsedContentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, parsedContentOffset, 0);
}

static createParsedContentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startParsedContentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDecryptedContent(builder:flatbuffers.Builder, decryptedContentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, decryptedContentOffset, 0);
}

static addChatId(builder:flatbuffers.Builder, chatIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, chatIdOffset, 0);
}

static addRecipient(builder:flatbuffers.Builder, recipientOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, recipientOffset, 0);
}

static endKind4Parsed(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 8) // chat_id
  builder.requiredField(offset, 10) // recipient
  return offset;
}

static createKind4Parsed(builder:flatbuffers.Builder, parsedContentOffset:flatbuffers.Offset, decryptedContentOffset:flatbuffers.Offset, chatIdOffset:flatbuffers.Offset, recipientOffset:flatbuffers.Offset):flatbuffers.Offset {
  Kind4Parsed.startKind4Parsed(builder);
  Kind4Parsed.addParsedContent(builder, parsedContentOffset);
  Kind4Parsed.addDecryptedContent(builder, decryptedContentOffset);
  Kind4Parsed.addChatId(builder, chatIdOffset);
  Kind4Parsed.addRecipient(builder, recipientOffset);
  return Kind4Parsed.endKind4Parsed(builder);
}

unpack(): Kind4ParsedT {
  return new Kind4ParsedT(
    this.bb!.createObjList<ContentBlock, ContentBlockT>(this.parsedContent.bind(this), this.parsedContentLength()),
    this.decryptedContent(),
    this.chatId(),
    this.recipient()
  );
}


unpackTo(_o: Kind4ParsedT): void {
  _o.parsedContent = this.bb!.createObjList<ContentBlock, ContentBlockT>(this.parsedContent.bind(this), this.parsedContentLength());
  _o.decryptedContent = this.decryptedContent();
  _o.chatId = this.chatId();
  _o.recipient = this.recipient();
}
}

export class Kind4ParsedT implements flatbuffers.IGeneratedObject {
constructor(
  public parsedContent: (ContentBlockT)[] = [],
  public decryptedContent: ByteString|Uint8Array|null = null,
  public chatId: ByteString|Uint8Array|null = null,
  public recipient: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const parsedContent = Kind4Parsed.createParsedContentVector(builder, builder.createObjectOffsetList(this.parsedContent));
  const decryptedContent = (this.decryptedContent !== null ? builder.createString(this.decryptedContent!) : 0);
  const chatId = (this.chatId !== null ? builder.createString(this.chatId!) : 0);
  const recipient = (this.recipient !== null ? builder.createString(this.recipient!) : 0);

  return Kind4Parsed.createKind4Parsed(builder,
    parsedContent,
    decryptedContent,
    chatId,
    recipient
  );
}
}
