import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Template, TemplateT } from '../../nostr/fb/template.js';


export class Publish implements flatbuffers.IUnpackableObject<PublishT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Publish {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPublish(bb:flatbuffers.ByteBuffer, obj?:Publish):Publish {
  return (obj || new Publish()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPublish(bb:flatbuffers.ByteBuffer, obj?:Publish):Publish {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Publish()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

publishId(): ByteString|null
publishId(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
publishId(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

template(obj?:Template):Template|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Template()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPublish(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPublishId(builder:flatbuffers.Builder, publishIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, publishIdOffset, 0);
}

static addTemplate(builder:flatbuffers.Builder, templateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, templateOffset, 0);
}

static endPublish(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // publish_id
  builder.requiredField(offset, 6) // template
  return offset;
}


unpack(): PublishT {
  return new PublishT(
    this.publishId(),
    (this.template() !== null ? this.template()!.unpack() : null)
  );
}


unpackTo(_o: PublishT): void {
  _o.publishId = this.publishId();
  _o.template = (this.template() !== null ? this.template()!.unpack() : null);
}
}

export class PublishT implements flatbuffers.IGeneratedObject {
constructor(
  public publishId: ByteString|Uint8Array|null = null,
  public template: TemplateT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const publishId = (this.publishId !== null ? builder.createString(this.publishId!) : 0);
  const template = (this.template !== null ? this.template!.pack(builder) : 0);

  Publish.startPublish(builder);
  Publish.addPublishId(builder, publishId);
  Publish.addTemplate(builder, template);

  return Publish.endPublish(builder);
}
}
