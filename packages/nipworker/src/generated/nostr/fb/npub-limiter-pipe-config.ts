import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class NpubLimiterPipeConfig implements flatbuffers.IUnpackableObject<NpubLimiterPipeConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NpubLimiterPipeConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNpubLimiterPipeConfig(bb:flatbuffers.ByteBuffer, obj?:NpubLimiterPipeConfig):NpubLimiterPipeConfig {
  return (obj || new NpubLimiterPipeConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNpubLimiterPipeConfig(bb:flatbuffers.ByteBuffer, obj?:NpubLimiterPipeConfig):NpubLimiterPipeConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NpubLimiterPipeConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

kind():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

limitPerNpub():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

maxTotalNpubs():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startNpubLimiterPipeConfig(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addKind(builder:flatbuffers.Builder, kind:number) {
  builder.addFieldInt16(0, kind, 0);
}

static addLimitPerNpub(builder:flatbuffers.Builder, limitPerNpub:number) {
  builder.addFieldInt32(1, limitPerNpub, 0);
}

static addMaxTotalNpubs(builder:flatbuffers.Builder, maxTotalNpubs:number) {
  builder.addFieldInt32(2, maxTotalNpubs, 0);
}

static endNpubLimiterPipeConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNpubLimiterPipeConfig(builder:flatbuffers.Builder, kind:number, limitPerNpub:number, maxTotalNpubs:number):flatbuffers.Offset {
  NpubLimiterPipeConfig.startNpubLimiterPipeConfig(builder);
  NpubLimiterPipeConfig.addKind(builder, kind);
  NpubLimiterPipeConfig.addLimitPerNpub(builder, limitPerNpub);
  NpubLimiterPipeConfig.addMaxTotalNpubs(builder, maxTotalNpubs);
  return NpubLimiterPipeConfig.endNpubLimiterPipeConfig(builder);
}

unpack(): NpubLimiterPipeConfigT {
  return new NpubLimiterPipeConfigT(
    this.kind(),
    this.limitPerNpub(),
    this.maxTotalNpubs()
  );
}


unpackTo(_o: NpubLimiterPipeConfigT): void {
  _o.kind = this.kind();
  _o.limitPerNpub = this.limitPerNpub();
  _o.maxTotalNpubs = this.maxTotalNpubs();
}
}

export class NpubLimiterPipeConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public kind: number = 0,
  public limitPerNpub: number = 0,
  public maxTotalNpubs: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return NpubLimiterPipeConfig.createNpubLimiterPipeConfig(builder,
    this.kind,
    this.limitPerNpub,
    this.maxTotalNpubs
  );
}
}
