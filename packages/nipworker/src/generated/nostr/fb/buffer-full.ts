import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class BufferFull implements flatbuffers.IUnpackableObject<BufferFullT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BufferFull {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBufferFull(bb:flatbuffers.ByteBuffer, obj?:BufferFull):BufferFull {
  return (obj || new BufferFull()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBufferFull(bb:flatbuffers.ByteBuffer, obj?:BufferFull):BufferFull {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BufferFull()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

droppedEvents():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startBufferFull(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addDroppedEvents(builder:flatbuffers.Builder, droppedEvents:number) {
  builder.addFieldInt16(0, droppedEvents, 0);
}

static endBufferFull(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBufferFull(builder:flatbuffers.Builder, droppedEvents:number):flatbuffers.Offset {
  BufferFull.startBufferFull(builder);
  BufferFull.addDroppedEvents(builder, droppedEvents);
  return BufferFull.endBufferFull(builder);
}

unpack(): BufferFullT {
  return new BufferFullT(
    this.droppedEvents()
  );
}


unpackTo(_o: BufferFullT): void {
  _o.droppedEvents = this.droppedEvents();
}
}

export class BufferFullT implements flatbuffers.IGeneratedObject {
constructor(
  public droppedEvents: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return BufferFull.createBufferFull(builder,
    this.droppedEvents
  );
}
}
