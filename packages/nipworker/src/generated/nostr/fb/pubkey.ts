import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Pubkey implements flatbuffers.IUnpackableObject<PubkeyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Pubkey {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPubkey(bb:flatbuffers.ByteBuffer, obj?:Pubkey):Pubkey {
  return (obj || new Pubkey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPubkey(bb:flatbuffers.ByteBuffer, obj?:Pubkey):Pubkey {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Pubkey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pubkey(): ByteString|null
pubkey(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
pubkey(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startPubkey(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPubkey(builder:flatbuffers.Builder, pubkeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pubkeyOffset, 0);
}

static endPubkey(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // pubkey
  return offset;
}

static createPubkey(builder:flatbuffers.Builder, pubkeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  Pubkey.startPubkey(builder);
  Pubkey.addPubkey(builder, pubkeyOffset);
  return Pubkey.endPubkey(builder);
}

unpack(): PubkeyT {
  return new PubkeyT(
    this.pubkey()
  );
}


unpackTo(_o: PubkeyT): void {
  _o.pubkey = this.pubkey();
}
}

export class PubkeyT implements flatbuffers.IGeneratedObject {
constructor(
  public pubkey: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pubkey = (this.pubkey !== null ? builder.createString(this.pubkey!) : 0);

  return Pubkey.createPubkey(builder,
    pubkey
  );
}
}
