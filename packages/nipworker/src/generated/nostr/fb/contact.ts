import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Contact implements flatbuffers.IUnpackableObject<ContactT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Contact {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsContact(bb:flatbuffers.ByteBuffer, obj?:Contact):Contact {
  return (obj || new Contact()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsContact(bb:flatbuffers.ByteBuffer, obj?:Contact):Contact {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Contact()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pubkey(): ByteString|null
pubkey(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
pubkey(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

relays(index: number): ByteString
relays(index: number,optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array
relays(index: number,optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

relaysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

petname(): ByteString|null
petname(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
petname(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startContact(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPubkey(builder:flatbuffers.Builder, pubkeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pubkeyOffset, 0);
}

static addRelays(builder:flatbuffers.Builder, relaysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, relaysOffset, 0);
}

static createRelaysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRelaysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPetname(builder:flatbuffers.Builder, petnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, petnameOffset, 0);
}

static endContact(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // pubkey
  return offset;
}

static createContact(builder:flatbuffers.Builder, pubkeyOffset:flatbuffers.Offset, relaysOffset:flatbuffers.Offset, petnameOffset:flatbuffers.Offset):flatbuffers.Offset {
  Contact.startContact(builder);
  Contact.addPubkey(builder, pubkeyOffset);
  Contact.addRelays(builder, relaysOffset);
  Contact.addPetname(builder, petnameOffset);
  return Contact.endContact(builder);
}

unpack(): ContactT {
  return new ContactT(
    this.pubkey(),
    this.bb!.createScalarList<string>(this.relays.bind(this), this.relaysLength()),
    this.petname()
  );
}


unpackTo(_o: ContactT): void {
  _o.pubkey = this.pubkey();
  _o.relays = this.bb!.createScalarList<string>(this.relays.bind(this), this.relaysLength());
  _o.petname = this.petname();
}
}

export class ContactT implements flatbuffers.IGeneratedObject {
constructor(
  public pubkey: ByteString|Uint8Array|null = null,
  public relays: (string)[] = [],
  public petname: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pubkey = (this.pubkey !== null ? builder.createString(this.pubkey!) : 0);
  const relays = Contact.createRelaysVector(builder, builder.createObjectOffsetList(this.relays));
  const petname = (this.petname !== null ? builder.createString(this.petname!) : 0);

  return Contact.createContact(builder,
    pubkey,
    relays,
    petname
  );
}
}
