import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class HashtagData implements flatbuffers.IUnpackableObject<HashtagDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HashtagData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHashtagData(bb:flatbuffers.ByteBuffer, obj?:HashtagData):HashtagData {
  return (obj || new HashtagData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHashtagData(bb:flatbuffers.ByteBuffer, obj?:HashtagData):HashtagData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HashtagData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tag(): ByteString|null
tag(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
tag(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startHashtagData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addTag(builder:flatbuffers.Builder, tagOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tagOffset, 0);
}

static endHashtagData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // tag
  return offset;
}

static createHashtagData(builder:flatbuffers.Builder, tagOffset:flatbuffers.Offset):flatbuffers.Offset {
  HashtagData.startHashtagData(builder);
  HashtagData.addTag(builder, tagOffset);
  return HashtagData.endHashtagData(builder);
}

unpack(): HashtagDataT {
  return new HashtagDataT(
    this.tag()
  );
}


unpackTo(_o: HashtagDataT): void {
  _o.tag = this.tag();
}
}

export class HashtagDataT implements flatbuffers.IGeneratedObject {
constructor(
  public tag: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const tag = (this.tag !== null ? builder.createString(this.tag!) : 0);

  return HashtagData.createHashtagData(builder,
    tag
  );
}
}
