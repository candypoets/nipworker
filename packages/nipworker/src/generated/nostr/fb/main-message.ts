import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GetPublicKey, GetPublicKeyT } from '../../nostr/fb/get-public-key.js';
import { MainContent, unionToMainContent, unionListToMainContent } from '../../nostr/fb/main-content.js';
import { Publish, PublishT } from '../../nostr/fb/publish.js';
import { SetSigner, SetSignerT } from '../../nostr/fb/set-signer.js';
import { SignEvent, SignEventT } from '../../nostr/fb/sign-event.js';
import { Subscribe, SubscribeT } from '../../nostr/fb/subscribe.js';
import { Unsubscribe, UnsubscribeT } from '../../nostr/fb/unsubscribe.js';


export class MainMessage implements flatbuffers.IUnpackableObject<MainMessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MainMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMainMessage(bb:flatbuffers.ByteBuffer, obj?:MainMessage):MainMessage {
  return (obj || new MainMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMainMessage(bb:flatbuffers.ByteBuffer, obj?:MainMessage):MainMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MainMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

contentType():MainContent {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MainContent.NONE;
}

content<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startMainMessage(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addContentType(builder:flatbuffers.Builder, contentType:MainContent) {
  builder.addFieldInt8(0, contentType, MainContent.NONE);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, contentOffset, 0);
}

static endMainMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // content
  return offset;
}

static createMainMessage(builder:flatbuffers.Builder, contentType:MainContent, contentOffset:flatbuffers.Offset):flatbuffers.Offset {
  MainMessage.startMainMessage(builder);
  MainMessage.addContentType(builder, contentType);
  MainMessage.addContent(builder, contentOffset);
  return MainMessage.endMainMessage(builder);
}

unpack(): MainMessageT {
  return new MainMessageT(
    this.contentType(),
    (() => {
      const temp = unionToMainContent(this.contentType(), this.content.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: MainMessageT): void {
  _o.contentType = this.contentType();
  _o.content = (() => {
      const temp = unionToMainContent(this.contentType(), this.content.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class MainMessageT implements flatbuffers.IGeneratedObject {
constructor(
  public contentType: MainContent = MainContent.NONE,
  public content: GetPublicKeyT|PublishT|SetSignerT|SignEventT|SubscribeT|UnsubscribeT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const content = builder.createObjectOffset(this.content);

  return MainMessage.createMainMessage(builder,
    this.contentType,
    content
  );
}
}
