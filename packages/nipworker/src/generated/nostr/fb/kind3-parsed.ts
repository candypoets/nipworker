import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Contact, ContactT } from '../../nostr/fb/contact.js';


export class Kind3Parsed implements flatbuffers.IUnpackableObject<Kind3ParsedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Kind3Parsed {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKind3Parsed(bb:flatbuffers.ByteBuffer, obj?:Kind3Parsed):Kind3Parsed {
  return (obj || new Kind3Parsed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKind3Parsed(bb:flatbuffers.ByteBuffer, obj?:Kind3Parsed):Kind3Parsed {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Kind3Parsed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

contacts(index: number, obj?:Contact):Contact|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Contact()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

contactsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startKind3Parsed(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addContacts(builder:flatbuffers.Builder, contactsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, contactsOffset, 0);
}

static createContactsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startContactsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endKind3Parsed(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // contacts
  return offset;
}

static createKind3Parsed(builder:flatbuffers.Builder, contactsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Kind3Parsed.startKind3Parsed(builder);
  Kind3Parsed.addContacts(builder, contactsOffset);
  return Kind3Parsed.endKind3Parsed(builder);
}

unpack(): Kind3ParsedT {
  return new Kind3ParsedT(
    this.bb!.createObjList<Contact, ContactT>(this.contacts.bind(this), this.contactsLength())
  );
}


unpackTo(_o: Kind3ParsedT): void {
  _o.contacts = this.bb!.createObjList<Contact, ContactT>(this.contacts.bind(this), this.contactsLength());
}
}

export class Kind3ParsedT implements flatbuffers.IGeneratedObject {
constructor(
  public contacts: (ContactT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const contacts = Kind3Parsed.createContactsVector(builder, builder.createObjectOffsetList(this.contacts));

  return Kind3Parsed.createKind3Parsed(builder,
    contacts
  );
}
}
