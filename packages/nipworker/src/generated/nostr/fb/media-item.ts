import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ImageData, ImageDataT } from '../../nostr/fb/image-data.js';
import { VideoData, VideoDataT } from '../../nostr/fb/video-data.js';


export class MediaItem implements flatbuffers.IUnpackableObject<MediaItemT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MediaItem {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMediaItem(bb:flatbuffers.ByteBuffer, obj?:MediaItem):MediaItem {
  return (obj || new MediaItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMediaItem(bb:flatbuffers.ByteBuffer, obj?:MediaItem):MediaItem {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MediaItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

image(obj?:ImageData):ImageData|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ImageData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

video(obj?:VideoData):VideoData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new VideoData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startMediaItem(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addImage(builder:flatbuffers.Builder, imageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, imageOffset, 0);
}

static addVideo(builder:flatbuffers.Builder, videoOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, videoOffset, 0);
}

static endMediaItem(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): MediaItemT {
  return new MediaItemT(
    (this.image() !== null ? this.image()!.unpack() : null),
    (this.video() !== null ? this.video()!.unpack() : null)
  );
}


unpackTo(_o: MediaItemT): void {
  _o.image = (this.image() !== null ? this.image()!.unpack() : null);
  _o.video = (this.video() !== null ? this.video()!.unpack() : null);
}
}

export class MediaItemT implements flatbuffers.IGeneratedObject {
constructor(
  public image: ImageDataT|null = null,
  public video: VideoDataT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const image = (this.image !== null ? this.image!.pack(builder) : 0);
  const video = (this.video !== null ? this.video!.pack(builder) : 0);

  MediaItem.startMediaItem(builder);
  MediaItem.addImage(builder, image);
  MediaItem.addVideo(builder, video);

  return MediaItem.endMediaItem(builder);
}
}
