import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class ProofVerificationPipeConfig implements flatbuffers.IUnpackableObject<ProofVerificationPipeConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ProofVerificationPipeConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProofVerificationPipeConfig(bb:flatbuffers.ByteBuffer, obj?:ProofVerificationPipeConfig):ProofVerificationPipeConfig {
  return (obj || new ProofVerificationPipeConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProofVerificationPipeConfig(bb:flatbuffers.ByteBuffer, obj?:ProofVerificationPipeConfig):ProofVerificationPipeConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProofVerificationPipeConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

maxProofs():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startProofVerificationPipeConfig(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMaxProofs(builder:flatbuffers.Builder, maxProofs:number) {
  builder.addFieldInt32(0, maxProofs, 0);
}

static endProofVerificationPipeConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createProofVerificationPipeConfig(builder:flatbuffers.Builder, maxProofs:number):flatbuffers.Offset {
  ProofVerificationPipeConfig.startProofVerificationPipeConfig(builder);
  ProofVerificationPipeConfig.addMaxProofs(builder, maxProofs);
  return ProofVerificationPipeConfig.endProofVerificationPipeConfig(builder);
}

unpack(): ProofVerificationPipeConfigT {
  return new ProofVerificationPipeConfigT(
    this.maxProofs()
  );
}


unpackTo(_o: ProofVerificationPipeConfigT): void {
  _o.maxProofs = this.maxProofs();
}
}

export class ProofVerificationPipeConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public maxProofs: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ProofVerificationPipeConfig.createProofVerificationPipeConfig(builder,
    this.maxProofs
  );
}
}
