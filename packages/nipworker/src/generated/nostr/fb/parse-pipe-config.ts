import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class ParsePipeConfig implements flatbuffers.IUnpackableObject<ParsePipeConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ParsePipeConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsParsePipeConfig(bb:flatbuffers.ByteBuffer, obj?:ParsePipeConfig):ParsePipeConfig {
  return (obj || new ParsePipeConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsParsePipeConfig(bb:flatbuffers.ByteBuffer, obj?:ParsePipeConfig):ParsePipeConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ParsePipeConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startParsePipeConfig(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endParsePipeConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createParsePipeConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  ParsePipeConfig.startParsePipeConfig(builder);
  return ParsePipeConfig.endParsePipeConfig(builder);
}

unpack(): ParsePipeConfigT {
  return new ParsePipeConfigT();
}


unpackTo(_o: ParsePipeConfigT): void {}
}

export class ParsePipeConfigT implements flatbuffers.IGeneratedObject {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ParsePipeConfig.createParsePipeConfig(builder);
}
}
