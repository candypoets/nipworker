import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class HTLCWitness implements flatbuffers.IUnpackableObject<HTLCWitnessT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HTLCWitness {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHTLCWitness(bb:flatbuffers.ByteBuffer, obj?:HTLCWitness):HTLCWitness {
  return (obj || new HTLCWitness()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHTLCWitness(bb:flatbuffers.ByteBuffer, obj?:HTLCWitness):HTLCWitness {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HTLCWitness()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

preimage(): ByteString|null
preimage(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
preimage(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

signatures(index: number): ByteString
signatures(index: number,optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array
signatures(index: number,optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

signaturesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startHTLCWitness(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPreimage(builder:flatbuffers.Builder, preimageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, preimageOffset, 0);
}

static addSignatures(builder:flatbuffers.Builder, signaturesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, signaturesOffset, 0);
}

static createSignaturesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSignaturesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endHTLCWitness(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // preimage
  return offset;
}

static createHTLCWitness(builder:flatbuffers.Builder, preimageOffset:flatbuffers.Offset, signaturesOffset:flatbuffers.Offset):flatbuffers.Offset {
  HTLCWitness.startHTLCWitness(builder);
  HTLCWitness.addPreimage(builder, preimageOffset);
  HTLCWitness.addSignatures(builder, signaturesOffset);
  return HTLCWitness.endHTLCWitness(builder);
}

unpack(): HTLCWitnessT {
  return new HTLCWitnessT(
    this.preimage(),
    this.bb!.createScalarList<string>(this.signatures.bind(this), this.signaturesLength())
  );
}


unpackTo(_o: HTLCWitnessT): void {
  _o.preimage = this.preimage();
  _o.signatures = this.bb!.createScalarList<string>(this.signatures.bind(this), this.signaturesLength());
}
}

export class HTLCWitnessT implements flatbuffers.IGeneratedObject {
constructor(
  public preimage: ByteString|Uint8Array|null = null,
  public signatures: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const preimage = (this.preimage !== null ? builder.createString(this.preimage!) : 0);
  const signatures = HTLCWitness.createSignaturesVector(builder, builder.createObjectOffsetList(this.signatures));

  return HTLCWitness.createHTLCWitness(builder,
    preimage,
    signatures
  );
}
}
