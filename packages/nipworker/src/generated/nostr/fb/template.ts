import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { StringVec, StringVecT } from '../../nostr/fb/string-vec.js';


export class Template implements flatbuffers.IUnpackableObject<TemplateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Template {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTemplate(bb:flatbuffers.ByteBuffer, obj?:Template):Template {
  return (obj || new Template()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTemplate(bb:flatbuffers.ByteBuffer, obj?:Template):Template {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Template()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

kind():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

content(): ByteString|null
content(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
content(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

tags(index: number, obj?:StringVec):StringVec|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new StringVec()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTemplate(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addKind(builder:flatbuffers.Builder, kind:number) {
  builder.addFieldInt16(0, kind, 0);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, contentOffset, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTemplate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // content
  builder.requiredField(offset, 8) // tags
  return offset;
}

static createTemplate(builder:flatbuffers.Builder, kind:number, contentOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Template.startTemplate(builder);
  Template.addKind(builder, kind);
  Template.addContent(builder, contentOffset);
  Template.addTags(builder, tagsOffset);
  return Template.endTemplate(builder);
}

unpack(): TemplateT {
  return new TemplateT(
    this.kind(),
    this.content(),
    this.bb!.createObjList<StringVec, StringVecT>(this.tags.bind(this), this.tagsLength())
  );
}


unpackTo(_o: TemplateT): void {
  _o.kind = this.kind();
  _o.content = this.content();
  _o.tags = this.bb!.createObjList<StringVec, StringVecT>(this.tags.bind(this), this.tagsLength());
}
}

export class TemplateT implements flatbuffers.IGeneratedObject {
constructor(
  public kind: number = 0,
  public content: ByteString|Uint8Array|null = null,
  public tags: (StringVecT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const content = (this.content !== null ? builder.createString(this.content!) : 0);
  const tags = Template.createTagsVector(builder, builder.createObjectOffsetList(this.tags));

  return Template.createTemplate(builder,
    this.kind,
    content,
    tags
  );
}
}
