import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DLEQProof, DLEQProofT } from '../../nostr/fb/dleqproof.js';


export class Proof implements flatbuffers.IUnpackableObject<ProofT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Proof {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProof(bb:flatbuffers.ByteBuffer, obj?:Proof):Proof {
  return (obj || new Proof()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProof(bb:flatbuffers.ByteBuffer, obj?:Proof):Proof {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Proof()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

amount():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

id(): ByteString|null
id(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
id(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

secret(): ByteString|null
secret(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
secret(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

c(): ByteString|null
c(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
c(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

dleq(obj?:DLEQProof):DLEQProof|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new DLEQProof()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startProof(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addAmount(builder:flatbuffers.Builder, amount:bigint) {
  builder.addFieldInt64(0, amount, BigInt('0'));
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOffset, 0);
}

static addSecret(builder:flatbuffers.Builder, secretOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, secretOffset, 0);
}

static addC(builder:flatbuffers.Builder, cOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, cOffset, 0);
}

static addDleq(builder:flatbuffers.Builder, dleqOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, dleqOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt8(5, version, 0);
}

static endProof(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // id
  builder.requiredField(offset, 8) // secret
  builder.requiredField(offset, 10) // c
  return offset;
}


unpack(): ProofT {
  return new ProofT(
    this.amount(),
    this.id(),
    this.secret(),
    this.c(),
    (this.dleq() !== null ? this.dleq()!.unpack() : null),
    this.version()
  );
}


unpackTo(_o: ProofT): void {
  _o.amount = this.amount();
  _o.id = this.id();
  _o.secret = this.secret();
  _o.c = this.c();
  _o.dleq = (this.dleq() !== null ? this.dleq()!.unpack() : null);
  _o.version = this.version();
}
}

export class ProofT implements flatbuffers.IGeneratedObject {
constructor(
  public amount: bigint = BigInt('0'),
  public id: ByteString|Uint8Array|null = null,
  public secret: ByteString|Uint8Array|null = null,
  public c: ByteString|Uint8Array|null = null,
  public dleq: DLEQProofT|null = null,
  public version: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const secret = (this.secret !== null ? builder.createString(this.secret!) : 0);
  const c = (this.c !== null ? builder.createString(this.c!) : 0);
  const dleq = (this.dleq !== null ? this.dleq!.pack(builder) : 0);

  Proof.startProof(builder);
  Proof.addAmount(builder, this.amount);
  Proof.addId(builder, id);
  Proof.addSecret(builder, secret);
  Proof.addC(builder, c);
  Proof.addDleq(builder, dleq);
  Proof.addVersion(builder, this.version);

  return Proof.endProof(builder);
}
}
