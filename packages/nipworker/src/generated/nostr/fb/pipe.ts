import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CounterPipeConfig, CounterPipeConfigT } from '../../nostr/fb/counter-pipe-config.js';
import { KindFilterPipeConfig, KindFilterPipeConfigT } from '../../nostr/fb/kind-filter-pipe-config.js';
import { NpubLimiterPipeConfig, NpubLimiterPipeConfigT } from '../../nostr/fb/npub-limiter-pipe-config.js';
import { ParsePipeConfig, ParsePipeConfigT } from '../../nostr/fb/parse-pipe-config.js';
import { PipeConfig, unionToPipeConfig, unionListToPipeConfig } from '../../nostr/fb/pipe-config.js';
import { ProofVerificationPipeConfig, ProofVerificationPipeConfigT } from '../../nostr/fb/proof-verification-pipe-config.js';
import { SaveToDbPipeConfig, SaveToDbPipeConfigT } from '../../nostr/fb/save-to-db-pipe-config.js';
import { SerializeEventsPipeConfig, SerializeEventsPipeConfigT } from '../../nostr/fb/serialize-events-pipe-config.js';


export class Pipe implements flatbuffers.IUnpackableObject<PipeT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Pipe {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPipe(bb:flatbuffers.ByteBuffer, obj?:Pipe):Pipe {
  return (obj || new Pipe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPipe(bb:flatbuffers.ByteBuffer, obj?:Pipe):Pipe {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Pipe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

configType():PipeConfig {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : PipeConfig.NONE;
}

config<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startPipe(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addConfigType(builder:flatbuffers.Builder, configType:PipeConfig) {
  builder.addFieldInt8(0, configType, PipeConfig.NONE);
}

static addConfig(builder:flatbuffers.Builder, configOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, configOffset, 0);
}

static endPipe(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // config
  return offset;
}

static createPipe(builder:flatbuffers.Builder, configType:PipeConfig, configOffset:flatbuffers.Offset):flatbuffers.Offset {
  Pipe.startPipe(builder);
  Pipe.addConfigType(builder, configType);
  Pipe.addConfig(builder, configOffset);
  return Pipe.endPipe(builder);
}

unpack(): PipeT {
  return new PipeT(
    this.configType(),
    (() => {
      const temp = unionToPipeConfig(this.configType(), this.config.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: PipeT): void {
  _o.configType = this.configType();
  _o.config = (() => {
      const temp = unionToPipeConfig(this.configType(), this.config.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class PipeT implements flatbuffers.IGeneratedObject {
constructor(
  public configType: PipeConfig = PipeConfig.NONE,
  public config: CounterPipeConfigT|KindFilterPipeConfigT|NpubLimiterPipeConfigT|ParsePipeConfigT|ProofVerificationPipeConfigT|SaveToDbPipeConfigT|SerializeEventsPipeConfigT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const config = builder.createObjectOffset(this.config);

  return Pipe.createPipe(builder,
    this.configType,
    config
  );
}
}
