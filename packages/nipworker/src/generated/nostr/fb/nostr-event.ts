import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { StringVec, StringVecT } from '../../nostr/fb/string-vec.js';


export class NostrEvent implements flatbuffers.IUnpackableObject<NostrEventT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NostrEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNostrEvent(bb:flatbuffers.ByteBuffer, obj?:NostrEvent):NostrEvent {
  return (obj || new NostrEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNostrEvent(bb:flatbuffers.ByteBuffer, obj?:NostrEvent):NostrEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NostrEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id(): ByteString|null
id(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
id(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

pubkey(): ByteString|null
pubkey(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
pubkey(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

kind():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

content(): ByteString|null
content(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
content(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

tags(index: number, obj?:StringVec):StringVec|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new StringVec()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

createdAt():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

sig(): ByteString|null
sig(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
sig(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startNostrEvent(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addPubkey(builder:flatbuffers.Builder, pubkeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pubkeyOffset, 0);
}

static addKind(builder:flatbuffers.Builder, kind:number) {
  builder.addFieldInt16(2, kind, 0);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, contentOffset, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAt:number) {
  builder.addFieldInt32(5, createdAt, 0);
}

static addSig(builder:flatbuffers.Builder, sigOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sigOffset, 0);
}

static endNostrEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  builder.requiredField(offset, 6) // pubkey
  builder.requiredField(offset, 10) // content
  builder.requiredField(offset, 12) // tags
  builder.requiredField(offset, 16) // sig
  return offset;
}

static createNostrEvent(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, pubkeyOffset:flatbuffers.Offset, kind:number, contentOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, createdAt:number, sigOffset:flatbuffers.Offset):flatbuffers.Offset {
  NostrEvent.startNostrEvent(builder);
  NostrEvent.addId(builder, idOffset);
  NostrEvent.addPubkey(builder, pubkeyOffset);
  NostrEvent.addKind(builder, kind);
  NostrEvent.addContent(builder, contentOffset);
  NostrEvent.addTags(builder, tagsOffset);
  NostrEvent.addCreatedAt(builder, createdAt);
  NostrEvent.addSig(builder, sigOffset);
  return NostrEvent.endNostrEvent(builder);
}

unpack(): NostrEventT {
  return new NostrEventT(
    this.id(),
    this.pubkey(),
    this.kind(),
    this.content(),
    this.bb!.createObjList<StringVec, StringVecT>(this.tags.bind(this), this.tagsLength()),
    this.createdAt(),
    this.sig()
  );
}


unpackTo(_o: NostrEventT): void {
  _o.id = this.id();
  _o.pubkey = this.pubkey();
  _o.kind = this.kind();
  _o.content = this.content();
  _o.tags = this.bb!.createObjList<StringVec, StringVecT>(this.tags.bind(this), this.tagsLength());
  _o.createdAt = this.createdAt();
  _o.sig = this.sig();
}
}

export class NostrEventT implements flatbuffers.IGeneratedObject {
constructor(
  public id: ByteString|Uint8Array|null = null,
  public pubkey: ByteString|Uint8Array|null = null,
  public kind: number = 0,
  public content: ByteString|Uint8Array|null = null,
  public tags: (StringVecT)[] = [],
  public createdAt: number = 0,
  public sig: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const pubkey = (this.pubkey !== null ? builder.createString(this.pubkey!) : 0);
  const content = (this.content !== null ? builder.createString(this.content!) : 0);
  const tags = NostrEvent.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const sig = (this.sig !== null ? builder.createString(this.sig!) : 0);

  return NostrEvent.createNostrEvent(builder,
    id,
    pubkey,
    this.kind,
    content,
    tags,
    this.createdAt,
    sig
  );
}
}
