import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Emoji implements flatbuffers.IUnpackableObject<EmojiT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Emoji {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEmoji(bb:flatbuffers.ByteBuffer, obj?:Emoji):Emoji {
  return (obj || new Emoji()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEmoji(bb:flatbuffers.ByteBuffer, obj?:Emoji):Emoji {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Emoji()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

shortcode(): ByteString|null
shortcode(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
shortcode(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

url(): ByteString|null
url(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
url(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startEmoji(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addShortcode(builder:flatbuffers.Builder, shortcodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, shortcodeOffset, 0);
}

static addUrl(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, urlOffset, 0);
}

static endEmoji(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // shortcode
  builder.requiredField(offset, 6) // url
  return offset;
}

static createEmoji(builder:flatbuffers.Builder, shortcodeOffset:flatbuffers.Offset, urlOffset:flatbuffers.Offset):flatbuffers.Offset {
  Emoji.startEmoji(builder);
  Emoji.addShortcode(builder, shortcodeOffset);
  Emoji.addUrl(builder, urlOffset);
  return Emoji.endEmoji(builder);
}

unpack(): EmojiT {
  return new EmojiT(
    this.shortcode(),
    this.url()
  );
}


unpackTo(_o: EmojiT): void {
  _o.shortcode = this.shortcode();
  _o.url = this.url();
}
}

export class EmojiT implements flatbuffers.IGeneratedObject {
constructor(
  public shortcode: ByteString|Uint8Array|null = null,
  public url: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const shortcode = (this.shortcode !== null ? builder.createString(this.shortcode!) : 0);
  const url = (this.url !== null ? builder.createString(this.url!) : 0);

  return Emoji.createEmoji(builder,
    shortcode,
    url
  );
}
}
