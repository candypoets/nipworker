import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Pipe, PipeT } from '../../nostr/fb/pipe.js';


export class PipelineConfig implements flatbuffers.IUnpackableObject<PipelineConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PipelineConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPipelineConfig(bb:flatbuffers.ByteBuffer, obj?:PipelineConfig):PipelineConfig {
  return (obj || new PipelineConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPipelineConfig(bb:flatbuffers.ByteBuffer, obj?:PipelineConfig):PipelineConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PipelineConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pipes(index: number, obj?:Pipe):Pipe|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Pipe()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

pipesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPipelineConfig(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPipes(builder:flatbuffers.Builder, pipesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pipesOffset, 0);
}

static createPipesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPipesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPipelineConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // pipes
  return offset;
}

static createPipelineConfig(builder:flatbuffers.Builder, pipesOffset:flatbuffers.Offset):flatbuffers.Offset {
  PipelineConfig.startPipelineConfig(builder);
  PipelineConfig.addPipes(builder, pipesOffset);
  return PipelineConfig.endPipelineConfig(builder);
}

unpack(): PipelineConfigT {
  return new PipelineConfigT(
    this.bb!.createObjList<Pipe, PipeT>(this.pipes.bind(this), this.pipesLength())
  );
}


unpackTo(_o: PipelineConfigT): void {
  _o.pipes = this.bb!.createObjList<Pipe, PipeT>(this.pipes.bind(this), this.pipesLength());
}
}

export class PipelineConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public pipes: (PipeT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pipes = PipelineConfig.createPipesVector(builder, builder.createObjectOffsetList(this.pipes));

  return PipelineConfig.createPipelineConfig(builder,
    pipes
  );
}
}
