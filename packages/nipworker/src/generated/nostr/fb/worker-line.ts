import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MsgKind } from '../../nostr/fb/msg-kind.js';
import { RelayRef, RelayRefT } from '../../nostr/fb/relay-ref.js';


export class WorkerLine implements flatbuffers.IUnpackableObject<WorkerLineT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WorkerLine {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWorkerLine(bb:flatbuffers.ByteBuffer, obj?:WorkerLine):WorkerLine {
  return (obj || new WorkerLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWorkerLine(bb:flatbuffers.ByteBuffer, obj?:WorkerLine):WorkerLine {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WorkerLine()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

relay(obj?:RelayRef):RelayRef|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new RelayRef()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

kind():MsgKind {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : MsgKind.Unknown;
}

subId(): ByteString|null
subId(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
subId(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

raw(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

rawLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rawArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startWorkerLine(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addRelay(builder:flatbuffers.Builder, relayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, relayOffset, 0);
}

static addKind(builder:flatbuffers.Builder, kind:MsgKind) {
  builder.addFieldInt16(1, kind, MsgKind.Unknown);
}

static addSubId(builder:flatbuffers.Builder, subIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, subIdOffset, 0);
}

static addRaw(builder:flatbuffers.Builder, rawOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, rawOffset, 0);
}

static createRawVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startRawVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endWorkerLine(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // relay
  builder.requiredField(offset, 10) // raw
  return offset;
}

static createWorkerLine(builder:flatbuffers.Builder, relayOffset:flatbuffers.Offset, kind:MsgKind, subIdOffset:flatbuffers.Offset, rawOffset:flatbuffers.Offset):flatbuffers.Offset {
  WorkerLine.startWorkerLine(builder);
  WorkerLine.addRelay(builder, relayOffset);
  WorkerLine.addKind(builder, kind);
  WorkerLine.addSubId(builder, subIdOffset);
  WorkerLine.addRaw(builder, rawOffset);
  return WorkerLine.endWorkerLine(builder);
}

unpack(): WorkerLineT {
  return new WorkerLineT(
    (this.relay() !== null ? this.relay()!.unpack() : null),
    this.kind(),
    this.subId(),
    this.bb!.createScalarList<number>(this.raw.bind(this), this.rawLength())
  );
}


unpackTo(_o: WorkerLineT): void {
  _o.relay = (this.relay() !== null ? this.relay()!.unpack() : null);
  _o.kind = this.kind();
  _o.subId = this.subId();
  _o.raw = this.bb!.createScalarList<number>(this.raw.bind(this), this.rawLength());
}
}

export class WorkerLineT implements flatbuffers.IGeneratedObject {
constructor(
  public relay: RelayRefT|null = null,
  public kind: MsgKind = MsgKind.Unknown,
  public subId: ByteString|Uint8Array|null = null,
  public raw: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const relay = (this.relay !== null ? this.relay!.pack(builder) : 0);
  const subId = (this.subId !== null ? builder.createString(this.subId!) : 0);
  const raw = WorkerLine.createRawVector(builder, this.raw);

  return WorkerLine.createWorkerLine(builder,
    relay,
    this.kind,
    subId,
    raw
  );
}
}
