import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Template, TemplateT } from '../../nostr/fb/template.js';


export class SignEvent implements flatbuffers.IUnpackableObject<SignEventT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SignEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSignEvent(bb:flatbuffers.ByteBuffer, obj?:SignEvent):SignEvent {
  return (obj || new SignEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSignEvent(bb:flatbuffers.ByteBuffer, obj?:SignEvent):SignEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SignEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

template(obj?:Template):Template|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Template()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSignEvent(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addTemplate(builder:flatbuffers.Builder, templateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, templateOffset, 0);
}

static endSignEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // template
  return offset;
}

static createSignEvent(builder:flatbuffers.Builder, templateOffset:flatbuffers.Offset):flatbuffers.Offset {
  SignEvent.startSignEvent(builder);
  SignEvent.addTemplate(builder, templateOffset);
  return SignEvent.endSignEvent(builder);
}

unpack(): SignEventT {
  return new SignEventT(
    (this.template() !== null ? this.template()!.unpack() : null)
  );
}


unpackTo(_o: SignEventT): void {
  _o.template = (this.template() !== null ? this.template()!.unpack() : null);
}
}

export class SignEventT implements flatbuffers.IGeneratedObject {
constructor(
  public template: TemplateT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const template = (this.template !== null ? this.template!.pack(builder) : 0);

  return SignEvent.createSignEvent(builder,
    template
  );
}
}
