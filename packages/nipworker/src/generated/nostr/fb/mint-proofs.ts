import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Proof, ProofT } from '../../nostr/fb/proof.js';


export class MintProofs implements flatbuffers.IUnpackableObject<MintProofsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MintProofs {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMintProofs(bb:flatbuffers.ByteBuffer, obj?:MintProofs):MintProofs {
  return (obj || new MintProofs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMintProofs(bb:flatbuffers.ByteBuffer, obj?:MintProofs):MintProofs {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MintProofs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mint(): ByteString|null
mint(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
mint(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

proofs(index: number, obj?:Proof):Proof|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Proof()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

proofsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMintProofs(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMint(builder:flatbuffers.Builder, mintOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, mintOffset, 0);
}

static addProofs(builder:flatbuffers.Builder, proofsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, proofsOffset, 0);
}

static createProofsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startProofsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMintProofs(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // mint
  builder.requiredField(offset, 6) // proofs
  return offset;
}

static createMintProofs(builder:flatbuffers.Builder, mintOffset:flatbuffers.Offset, proofsOffset:flatbuffers.Offset):flatbuffers.Offset {
  MintProofs.startMintProofs(builder);
  MintProofs.addMint(builder, mintOffset);
  MintProofs.addProofs(builder, proofsOffset);
  return MintProofs.endMintProofs(builder);
}

unpack(): MintProofsT {
  return new MintProofsT(
    this.mint(),
    this.bb!.createObjList<Proof, ProofT>(this.proofs.bind(this), this.proofsLength())
  );
}


unpackTo(_o: MintProofsT): void {
  _o.mint = this.mint();
  _o.proofs = this.bb!.createObjList<Proof, ProofT>(this.proofs.bind(this), this.proofsLength());
}
}

export class MintProofsT implements flatbuffers.IGeneratedObject {
constructor(
  public mint: ByteString|Uint8Array|null = null,
  public proofs: (ProofT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const mint = (this.mint !== null ? builder.createString(this.mint!) : 0);
  const proofs = MintProofs.createProofsVector(builder, builder.createObjectOffsetList(this.proofs));

  return MintProofs.createMintProofs(builder,
    mint,
    proofs
  );
}
}
