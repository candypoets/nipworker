import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PipelineConfig, PipelineConfigT } from '../../nostr/fb/pipeline-config.js';


export class SubscriptionConfig implements flatbuffers.IUnpackableObject<SubscriptionConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SubscriptionConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSubscriptionConfig(bb:flatbuffers.ByteBuffer, obj?:SubscriptionConfig):SubscriptionConfig {
  return (obj || new SubscriptionConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSubscriptionConfig(bb:flatbuffers.ByteBuffer, obj?:SubscriptionConfig):SubscriptionConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SubscriptionConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pipeline(obj?:PipelineConfig):PipelineConfig|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new PipelineConfig()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

closeOnEose():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

cacheFirst():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

timeoutMs():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

maxEvents():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

skipCache():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

force():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

bytesPerEvent():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startSubscriptionConfig(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addPipeline(builder:flatbuffers.Builder, pipelineOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pipelineOffset, 0);
}

static addCloseOnEose(builder:flatbuffers.Builder, closeOnEose:boolean) {
  builder.addFieldInt8(1, +closeOnEose, +false);
}

static addCacheFirst(builder:flatbuffers.Builder, cacheFirst:boolean) {
  builder.addFieldInt8(2, +cacheFirst, +true);
}

static addTimeoutMs(builder:flatbuffers.Builder, timeoutMs:bigint) {
  builder.addFieldInt64(3, timeoutMs, BigInt('0'));
}

static addMaxEvents(builder:flatbuffers.Builder, maxEvents:number) {
  builder.addFieldInt32(4, maxEvents, 0);
}

static addSkipCache(builder:flatbuffers.Builder, skipCache:boolean) {
  builder.addFieldInt8(5, +skipCache, +false);
}

static addForce(builder:flatbuffers.Builder, force:boolean) {
  builder.addFieldInt8(6, +force, +false);
}

static addBytesPerEvent(builder:flatbuffers.Builder, bytesPerEvent:number) {
  builder.addFieldInt32(7, bytesPerEvent, 0);
}

static endSubscriptionConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSubscriptionConfig(builder:flatbuffers.Builder, pipelineOffset:flatbuffers.Offset, closeOnEose:boolean, cacheFirst:boolean, timeoutMs:bigint, maxEvents:number, skipCache:boolean, force:boolean, bytesPerEvent:number):flatbuffers.Offset {
  SubscriptionConfig.startSubscriptionConfig(builder);
  SubscriptionConfig.addPipeline(builder, pipelineOffset);
  SubscriptionConfig.addCloseOnEose(builder, closeOnEose);
  SubscriptionConfig.addCacheFirst(builder, cacheFirst);
  SubscriptionConfig.addTimeoutMs(builder, timeoutMs);
  SubscriptionConfig.addMaxEvents(builder, maxEvents);
  SubscriptionConfig.addSkipCache(builder, skipCache);
  SubscriptionConfig.addForce(builder, force);
  SubscriptionConfig.addBytesPerEvent(builder, bytesPerEvent);
  return SubscriptionConfig.endSubscriptionConfig(builder);
}

unpack(): SubscriptionConfigT {
  return new SubscriptionConfigT(
    (this.pipeline() !== null ? this.pipeline()!.unpack() : null),
    this.closeOnEose(),
    this.cacheFirst(),
    this.timeoutMs(),
    this.maxEvents(),
    this.skipCache(),
    this.force(),
    this.bytesPerEvent()
  );
}


unpackTo(_o: SubscriptionConfigT): void {
  _o.pipeline = (this.pipeline() !== null ? this.pipeline()!.unpack() : null);
  _o.closeOnEose = this.closeOnEose();
  _o.cacheFirst = this.cacheFirst();
  _o.timeoutMs = this.timeoutMs();
  _o.maxEvents = this.maxEvents();
  _o.skipCache = this.skipCache();
  _o.force = this.force();
  _o.bytesPerEvent = this.bytesPerEvent();
}
}

export class SubscriptionConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public pipeline: PipelineConfigT|null = null,
  public closeOnEose: boolean = false,
  public cacheFirst: boolean = true,
  public timeoutMs: bigint = BigInt('0'),
  public maxEvents: number = 0,
  public skipCache: boolean = false,
  public force: boolean = false,
  public bytesPerEvent: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pipeline = (this.pipeline !== null ? this.pipeline!.pack(builder) : 0);

  return SubscriptionConfig.createSubscriptionConfig(builder,
    pipeline,
    this.closeOnEose,
    this.cacheFirst,
    this.timeoutMs,
    this.maxEvents,
    this.skipCache,
    this.force,
    this.bytesPerEvent
  );
}
}
