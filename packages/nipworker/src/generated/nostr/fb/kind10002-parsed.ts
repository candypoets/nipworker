import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RelayInfo, RelayInfoT } from '../../nostr/fb/relay-info.js';


export class Kind10002Parsed implements flatbuffers.IUnpackableObject<Kind10002ParsedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Kind10002Parsed {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKind10002Parsed(bb:flatbuffers.ByteBuffer, obj?:Kind10002Parsed):Kind10002Parsed {
  return (obj || new Kind10002Parsed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKind10002Parsed(bb:flatbuffers.ByteBuffer, obj?:Kind10002Parsed):Kind10002Parsed {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Kind10002Parsed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

relays(index: number, obj?:RelayInfo):RelayInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new RelayInfo()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

relaysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startKind10002Parsed(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addRelays(builder:flatbuffers.Builder, relaysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, relaysOffset, 0);
}

static createRelaysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRelaysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endKind10002Parsed(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // relays
  return offset;
}

static createKind10002Parsed(builder:flatbuffers.Builder, relaysOffset:flatbuffers.Offset):flatbuffers.Offset {
  Kind10002Parsed.startKind10002Parsed(builder);
  Kind10002Parsed.addRelays(builder, relaysOffset);
  return Kind10002Parsed.endKind10002Parsed(builder);
}

unpack(): Kind10002ParsedT {
  return new Kind10002ParsedT(
    this.bb!.createObjList<RelayInfo, RelayInfoT>(this.relays.bind(this), this.relaysLength())
  );
}


unpackTo(_o: Kind10002ParsedT): void {
  _o.relays = this.bb!.createObjList<RelayInfo, RelayInfoT>(this.relays.bind(this), this.relaysLength());
}
}

export class Kind10002ParsedT implements flatbuffers.IGeneratedObject {
constructor(
  public relays: (RelayInfoT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const relays = Kind10002Parsed.createRelaysVector(builder, builder.createObjectOffsetList(this.relays));

  return Kind10002Parsed.createKind10002Parsed(builder,
    relays
  );
}
}
