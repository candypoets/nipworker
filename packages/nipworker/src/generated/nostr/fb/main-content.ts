import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { GetPublicKey, GetPublicKeyT } from '../../nostr/fb/get-public-key.js';
import { Publish, PublishT } from '../../nostr/fb/publish.js';
import { SetSigner, SetSignerT } from '../../nostr/fb/set-signer.js';
import { SignEvent, SignEventT } from '../../nostr/fb/sign-event.js';
import { Subscribe, SubscribeT } from '../../nostr/fb/subscribe.js';
import { Unsubscribe, UnsubscribeT } from '../../nostr/fb/unsubscribe.js';


export enum MainContent {
  NONE = 0,
  Subscribe = 1,
  Unsubscribe = 2,
  Publish = 3,
  SignEvent = 4,
  SetSigner = 5,
  GetPublicKey = 6
}

export function unionToMainContent(
  type: MainContent,
  accessor: (obj:GetPublicKey|Publish|SetSigner|SignEvent|Subscribe|Unsubscribe) => GetPublicKey|Publish|SetSigner|SignEvent|Subscribe|Unsubscribe|null
): GetPublicKey|Publish|SetSigner|SignEvent|Subscribe|Unsubscribe|null {
  switch(MainContent[type]) {
    case 'NONE': return null; 
    case 'Subscribe': return accessor(new Subscribe())! as Subscribe;
    case 'Unsubscribe': return accessor(new Unsubscribe())! as Unsubscribe;
    case 'Publish': return accessor(new Publish())! as Publish;
    case 'SignEvent': return accessor(new SignEvent())! as SignEvent;
    case 'SetSigner': return accessor(new SetSigner())! as SetSigner;
    case 'GetPublicKey': return accessor(new GetPublicKey())! as GetPublicKey;
    default: return null;
  }
}

export function unionListToMainContent(
  type: MainContent, 
  accessor: (index: number, obj:GetPublicKey|Publish|SetSigner|SignEvent|Subscribe|Unsubscribe) => GetPublicKey|Publish|SetSigner|SignEvent|Subscribe|Unsubscribe|null, 
  index: number
): GetPublicKey|Publish|SetSigner|SignEvent|Subscribe|Unsubscribe|null {
  switch(MainContent[type]) {
    case 'NONE': return null; 
    case 'Subscribe': return accessor(index, new Subscribe())! as Subscribe;
    case 'Unsubscribe': return accessor(index, new Unsubscribe())! as Unsubscribe;
    case 'Publish': return accessor(index, new Publish())! as Publish;
    case 'SignEvent': return accessor(index, new SignEvent())! as SignEvent;
    case 'SetSigner': return accessor(index, new SetSigner())! as SetSigner;
    case 'GetPublicKey': return accessor(index, new GetPublicKey())! as GetPublicKey;
    default: return null;
  }
}
