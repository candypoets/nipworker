import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class CodeData implements flatbuffers.IUnpackableObject<CodeDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CodeData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCodeData(bb:flatbuffers.ByteBuffer, obj?:CodeData):CodeData {
  return (obj || new CodeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCodeData(bb:flatbuffers.ByteBuffer, obj?:CodeData):CodeData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CodeData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

language(): ByteString|null
language(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
language(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

code(): ByteString|null
code(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
code(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startCodeData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLanguage(builder:flatbuffers.Builder, languageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, languageOffset, 0);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, codeOffset, 0);
}

static endCodeData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // code
  return offset;
}

static createCodeData(builder:flatbuffers.Builder, languageOffset:flatbuffers.Offset, codeOffset:flatbuffers.Offset):flatbuffers.Offset {
  CodeData.startCodeData(builder);
  CodeData.addLanguage(builder, languageOffset);
  CodeData.addCode(builder, codeOffset);
  return CodeData.endCodeData(builder);
}

unpack(): CodeDataT {
  return new CodeDataT(
    this.language(),
    this.code()
  );
}


unpackTo(_o: CodeDataT): void {
  _o.language = this.language();
  _o.code = this.code();
}
}

export class CodeDataT implements flatbuffers.IGeneratedObject {
constructor(
  public language: ByteString|Uint8Array|null = null,
  public code: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const language = (this.language !== null ? builder.createString(this.language!) : 0);
  const code = (this.code !== null ? builder.createString(this.code!) : 0);

  return CodeData.createCodeData(builder,
    language,
    code
  );
}
}
