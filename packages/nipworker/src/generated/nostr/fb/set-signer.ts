import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PrivateKey, PrivateKeyT } from '../../nostr/fb/private-key.js';
import { SignerType, unionToSignerType, unionListToSignerType } from '../../nostr/fb/signer-type.js';


export class SetSigner implements flatbuffers.IUnpackableObject<SetSignerT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SetSigner {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSetSigner(bb:flatbuffers.ByteBuffer, obj?:SetSigner):SetSigner {
  return (obj || new SetSigner()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSetSigner(bb:flatbuffers.ByteBuffer, obj?:SetSigner):SetSigner {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SetSigner()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

signerTypeType():SignerType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : SignerType.NONE;
}

signerType<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startSetSigner(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSignerTypeType(builder:flatbuffers.Builder, signerTypeType:SignerType) {
  builder.addFieldInt8(0, signerTypeType, SignerType.NONE);
}

static addSignerType(builder:flatbuffers.Builder, signerTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, signerTypeOffset, 0);
}

static endSetSigner(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // signer_type
  return offset;
}

static createSetSigner(builder:flatbuffers.Builder, signerTypeType:SignerType, signerTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  SetSigner.startSetSigner(builder);
  SetSigner.addSignerTypeType(builder, signerTypeType);
  SetSigner.addSignerType(builder, signerTypeOffset);
  return SetSigner.endSetSigner(builder);
}

unpack(): SetSignerT {
  return new SetSignerT(
    this.signerTypeType(),
    (() => {
      const temp = unionToSignerType(this.signerTypeType(), this.signerType.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: SetSignerT): void {
  _o.signerTypeType = this.signerTypeType();
  _o.signerType = (() => {
      const temp = unionToSignerType(this.signerTypeType(), this.signerType.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class SetSignerT implements flatbuffers.IGeneratedObject {
constructor(
  public signerTypeType: SignerType = SignerType.NONE,
  public signerType: PrivateKeyT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const signerType = builder.createObjectOffset(this.signerType);

  return SetSigner.createSetSigner(builder,
    this.signerTypeType,
    signerType
  );
}
}
