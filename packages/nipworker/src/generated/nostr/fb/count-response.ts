import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class CountResponse implements flatbuffers.IUnpackableObject<CountResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CountResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCountResponse(bb:flatbuffers.ByteBuffer, obj?:CountResponse):CountResponse {
  return (obj || new CountResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCountResponse(bb:flatbuffers.ByteBuffer, obj?:CountResponse):CountResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CountResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

count():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

kind():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

you():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startCountResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addCount(builder:flatbuffers.Builder, count:number) {
  builder.addFieldInt32(0, count, 0);
}

static addKind(builder:flatbuffers.Builder, kind:number) {
  builder.addFieldInt16(1, kind, 0);
}

static addYou(builder:flatbuffers.Builder, you:boolean) {
  builder.addFieldInt8(2, +you, +false);
}

static endCountResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCountResponse(builder:flatbuffers.Builder, count:number, kind:number, you:boolean):flatbuffers.Offset {
  CountResponse.startCountResponse(builder);
  CountResponse.addCount(builder, count);
  CountResponse.addKind(builder, kind);
  CountResponse.addYou(builder, you);
  return CountResponse.endCountResponse(builder);
}

unpack(): CountResponseT {
  return new CountResponseT(
    this.count(),
    this.kind(),
    this.you()
  );
}


unpackTo(_o: CountResponseT): void {
  _o.count = this.count();
  _o.kind = this.kind();
  _o.you = this.you();
}
}

export class CountResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public count: number = 0,
  public kind: number = 0,
  public you: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CountResponse.createCountResponse(builder,
    this.count,
    this.kind,
    this.you
  );
}
}
