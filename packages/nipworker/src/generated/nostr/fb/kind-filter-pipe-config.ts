import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class KindFilterPipeConfig implements flatbuffers.IUnpackableObject<KindFilterPipeConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):KindFilterPipeConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKindFilterPipeConfig(bb:flatbuffers.ByteBuffer, obj?:KindFilterPipeConfig):KindFilterPipeConfig {
  return (obj || new KindFilterPipeConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKindFilterPipeConfig(bb:flatbuffers.ByteBuffer, obj?:KindFilterPipeConfig):KindFilterPipeConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KindFilterPipeConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

kinds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

kindsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

kindsArray():Uint16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startKindFilterPipeConfig(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addKinds(builder:flatbuffers.Builder, kindsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, kindsOffset, 0);
}

static createKindsVector(builder:flatbuffers.Builder, data:number[]|Uint16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createKindsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createKindsVector(builder:flatbuffers.Builder, data:number[]|Uint16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startKindsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static endKindFilterPipeConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // kinds
  return offset;
}

static createKindFilterPipeConfig(builder:flatbuffers.Builder, kindsOffset:flatbuffers.Offset):flatbuffers.Offset {
  KindFilterPipeConfig.startKindFilterPipeConfig(builder);
  KindFilterPipeConfig.addKinds(builder, kindsOffset);
  return KindFilterPipeConfig.endKindFilterPipeConfig(builder);
}

unpack(): KindFilterPipeConfigT {
  return new KindFilterPipeConfigT(
    this.bb!.createScalarList<number>(this.kinds.bind(this), this.kindsLength())
  );
}


unpackTo(_o: KindFilterPipeConfigT): void {
  _o.kinds = this.bb!.createScalarList<number>(this.kinds.bind(this), this.kindsLength());
}
}

export class KindFilterPipeConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public kinds: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const kinds = KindFilterPipeConfig.createKindsVector(builder, this.kinds);

  return KindFilterPipeConfig.createKindFilterPipeConfig(builder,
    kinds
  );
}
}
