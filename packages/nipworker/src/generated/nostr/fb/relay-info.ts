import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class RelayInfo implements flatbuffers.IUnpackableObject<RelayInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RelayInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRelayInfo(bb:flatbuffers.ByteBuffer, obj?:RelayInfo):RelayInfo {
  return (obj || new RelayInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRelayInfo(bb:flatbuffers.ByteBuffer, obj?:RelayInfo):RelayInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RelayInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

url(): ByteString|null
url(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
url(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

read():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

write():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startRelayInfo(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addUrl(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, urlOffset, 0);
}

static addRead(builder:flatbuffers.Builder, read:boolean) {
  builder.addFieldInt8(1, +read, +false);
}

static addWrite(builder:flatbuffers.Builder, write:boolean) {
  builder.addFieldInt8(2, +write, +false);
}

static endRelayInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // url
  return offset;
}

static createRelayInfo(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset, read:boolean, write:boolean):flatbuffers.Offset {
  RelayInfo.startRelayInfo(builder);
  RelayInfo.addUrl(builder, urlOffset);
  RelayInfo.addRead(builder, read);
  RelayInfo.addWrite(builder, write);
  return RelayInfo.endRelayInfo(builder);
}

unpack(): RelayInfoT {
  return new RelayInfoT(
    this.url(),
    this.read(),
    this.write()
  );
}


unpackTo(_o: RelayInfoT): void {
  _o.url = this.url();
  _o.read = this.read();
  _o.write = this.write();
}
}

export class RelayInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public url: ByteString|Uint8Array|null = null,
  public read: boolean = false,
  public write: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const url = (this.url !== null ? builder.createString(this.url!) : 0);

  return RelayInfo.createRelayInfo(builder,
    url,
    this.read,
    this.write
  );
}
}
