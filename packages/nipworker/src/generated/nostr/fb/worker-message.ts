import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BufferFull, BufferFullT } from '../../nostr/fb/buffer-full.js';
import { ConnectionStatus, ConnectionStatusT } from '../../nostr/fb/connection-status.js';
import { CountResponse, CountResponseT } from '../../nostr/fb/count-response.js';
import { Eoce, EoceT } from '../../nostr/fb/eoce.js';
import { Message, unionToMessage, unionListToMessage } from '../../nostr/fb/message.js';
import { MessageType } from '../../nostr/fb/message-type.js';
import { ParsedEvent, ParsedEventT } from '../../nostr/fb/parsed-event.js';
import { ValidProofs, ValidProofsT } from '../../nostr/fb/valid-proofs.js';


export class WorkerMessage implements flatbuffers.IUnpackableObject<WorkerMessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WorkerMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWorkerMessage(bb:flatbuffers.ByteBuffer, obj?:WorkerMessage):WorkerMessage {
  return (obj || new WorkerMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWorkerMessage(bb:flatbuffers.ByteBuffer, obj?:WorkerMessage):WorkerMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WorkerMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():MessageType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : MessageType.ParsedNostrEvent;
}

contentType():Message {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Message.NONE;
}

content<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startWorkerMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, type:MessageType) {
  builder.addFieldInt32(0, type, MessageType.ParsedNostrEvent);
}

static addContentType(builder:flatbuffers.Builder, contentType:Message) {
  builder.addFieldInt8(1, contentType, Message.NONE);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, contentOffset, 0);
}

static endWorkerMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishWorkerMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedWorkerMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createWorkerMessage(builder:flatbuffers.Builder, type:MessageType, contentType:Message, contentOffset:flatbuffers.Offset):flatbuffers.Offset {
  WorkerMessage.startWorkerMessage(builder);
  WorkerMessage.addType(builder, type);
  WorkerMessage.addContentType(builder, contentType);
  WorkerMessage.addContent(builder, contentOffset);
  return WorkerMessage.endWorkerMessage(builder);
}

unpack(): WorkerMessageT {
  return new WorkerMessageT(
    this.type(),
    this.contentType(),
    (() => {
      const temp = unionToMessage(this.contentType(), this.content.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: WorkerMessageT): void {
  _o.type = this.type();
  _o.contentType = this.contentType();
  _o.content = (() => {
      const temp = unionToMessage(this.contentType(), this.content.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class WorkerMessageT implements flatbuffers.IGeneratedObject {
constructor(
  public type: MessageType = MessageType.ParsedNostrEvent,
  public contentType: Message = Message.NONE,
  public content: BufferFullT|ConnectionStatusT|CountResponseT|EoceT|ParsedEventT|ValidProofsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const content = builder.createObjectOffset(this.content);

  return WorkerMessage.createWorkerMessage(builder,
    this.type,
    this.contentType,
    content
  );
}
}
