import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MintProofs, MintProofsT } from '../../nostr/fb/mint-proofs.js';


export class ValidProofs implements flatbuffers.IUnpackableObject<ValidProofsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ValidProofs {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsValidProofs(bb:flatbuffers.ByteBuffer, obj?:ValidProofs):ValidProofs {
  return (obj || new ValidProofs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsValidProofs(bb:flatbuffers.ByteBuffer, obj?:ValidProofs):ValidProofs {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ValidProofs()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

proofs(index: number, obj?:MintProofs):MintProofs|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MintProofs()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

proofsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startValidProofs(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addProofs(builder:flatbuffers.Builder, proofsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, proofsOffset, 0);
}

static createProofsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startProofsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endValidProofs(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // proofs
  return offset;
}

static createValidProofs(builder:flatbuffers.Builder, proofsOffset:flatbuffers.Offset):flatbuffers.Offset {
  ValidProofs.startValidProofs(builder);
  ValidProofs.addProofs(builder, proofsOffset);
  return ValidProofs.endValidProofs(builder);
}

unpack(): ValidProofsT {
  return new ValidProofsT(
    this.bb!.createObjList<MintProofs, MintProofsT>(this.proofs.bind(this), this.proofsLength())
  );
}


unpackTo(_o: ValidProofsT): void {
  _o.proofs = this.bb!.createObjList<MintProofs, MintProofsT>(this.proofs.bind(this), this.proofsLength());
}
}

export class ValidProofsT implements flatbuffers.IGeneratedObject {
constructor(
  public proofs: (MintProofsT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const proofs = ValidProofs.createProofsVector(builder, builder.createObjectOffsetList(this.proofs));

  return ValidProofs.createValidProofs(builder,
    proofs
  );
}
}
