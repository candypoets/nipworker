import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class ProfilePointer implements flatbuffers.IUnpackableObject<ProfilePointerT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ProfilePointer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProfilePointer(bb:flatbuffers.ByteBuffer, obj?:ProfilePointer):ProfilePointer {
  return (obj || new ProfilePointer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProfilePointer(bb:flatbuffers.ByteBuffer, obj?:ProfilePointer):ProfilePointer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProfilePointer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

publicKey(): ByteString|null
publicKey(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
publicKey(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

relays(index: number): ByteString
relays(index: number,optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array
relays(index: number,optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

relaysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startProfilePointer(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPublicKey(builder:flatbuffers.Builder, publicKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, publicKeyOffset, 0);
}

static addRelays(builder:flatbuffers.Builder, relaysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, relaysOffset, 0);
}

static createRelaysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRelaysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endProfilePointer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // public_key
  return offset;
}

static createProfilePointer(builder:flatbuffers.Builder, publicKeyOffset:flatbuffers.Offset, relaysOffset:flatbuffers.Offset):flatbuffers.Offset {
  ProfilePointer.startProfilePointer(builder);
  ProfilePointer.addPublicKey(builder, publicKeyOffset);
  ProfilePointer.addRelays(builder, relaysOffset);
  return ProfilePointer.endProfilePointer(builder);
}

unpack(): ProfilePointerT {
  return new ProfilePointerT(
    this.publicKey(),
    this.bb!.createScalarList<string>(this.relays.bind(this), this.relaysLength())
  );
}


unpackTo(_o: ProfilePointerT): void {
  _o.publicKey = this.publicKey();
  _o.relays = this.bb!.createScalarList<string>(this.relays.bind(this), this.relaysLength());
}
}

export class ProfilePointerT implements flatbuffers.IGeneratedObject {
constructor(
  public publicKey: ByteString|Uint8Array|null = null,
  public relays: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const publicKey = (this.publicKey !== null ? builder.createString(this.publicKey!) : 0);
  const relays = ProfilePointer.createRelaysVector(builder, builder.createObjectOffsetList(this.relays));

  return ProfilePointer.createProfilePointer(builder,
    publicKey,
    relays
  );
}
}
