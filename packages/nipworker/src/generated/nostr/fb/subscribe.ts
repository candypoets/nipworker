import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Request, RequestT } from '../../nostr/fb/request.js';
import { SubscriptionConfig, SubscriptionConfigT } from '../../nostr/fb/subscription-config.js';


export class Subscribe implements flatbuffers.IUnpackableObject<SubscribeT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Subscribe {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSubscribe(bb:flatbuffers.ByteBuffer, obj?:Subscribe):Subscribe {
  return (obj || new Subscribe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSubscribe(bb:flatbuffers.ByteBuffer, obj?:Subscribe):Subscribe {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Subscribe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

subscriptionId(): ByteString|null
subscriptionId(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
subscriptionId(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

requests(index: number, obj?:Request):Request|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Request()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

requestsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

config(obj?:SubscriptionConfig):SubscriptionConfig|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new SubscriptionConfig()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSubscribe(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSubscriptionId(builder:flatbuffers.Builder, subscriptionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, subscriptionIdOffset, 0);
}

static addRequests(builder:flatbuffers.Builder, requestsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, requestsOffset, 0);
}

static createRequestsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRequestsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addConfig(builder:flatbuffers.Builder, configOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, configOffset, 0);
}

static endSubscribe(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // subscription_id
  builder.requiredField(offset, 6) // requests
  builder.requiredField(offset, 8) // config
  return offset;
}


unpack(): SubscribeT {
  return new SubscribeT(
    this.subscriptionId(),
    this.bb!.createObjList<Request, RequestT>(this.requests.bind(this), this.requestsLength()),
    (this.config() !== null ? this.config()!.unpack() : null)
  );
}


unpackTo(_o: SubscribeT): void {
  _o.subscriptionId = this.subscriptionId();
  _o.requests = this.bb!.createObjList<Request, RequestT>(this.requests.bind(this), this.requestsLength());
  _o.config = (this.config() !== null ? this.config()!.unpack() : null);
}
}

export class SubscribeT implements flatbuffers.IGeneratedObject {
constructor(
  public subscriptionId: ByteString|Uint8Array|null = null,
  public requests: (RequestT)[] = [],
  public config: SubscriptionConfigT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const subscriptionId = (this.subscriptionId !== null ? builder.createString(this.subscriptionId!) : 0);
  const requests = Subscribe.createRequestsVector(builder, builder.createObjectOffsetList(this.requests));
  const config = (this.config !== null ? this.config!.pack(builder) : 0);

  Subscribe.startSubscribe(builder);
  Subscribe.addSubscriptionId(builder, subscriptionId);
  Subscribe.addRequests(builder, requests);
  Subscribe.addConfig(builder, config);

  return Subscribe.endSubscribe(builder);
}
}
