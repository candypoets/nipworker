import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class CounterPipeConfig implements flatbuffers.IUnpackableObject<CounterPipeConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CounterPipeConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCounterPipeConfig(bb:flatbuffers.ByteBuffer, obj?:CounterPipeConfig):CounterPipeConfig {
  return (obj || new CounterPipeConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCounterPipeConfig(bb:flatbuffers.ByteBuffer, obj?:CounterPipeConfig):CounterPipeConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CounterPipeConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

kinds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

kindsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

kindsArray():Uint16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

pubkey(): ByteString|null
pubkey(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
pubkey(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startCounterPipeConfig(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKinds(builder:flatbuffers.Builder, kindsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, kindsOffset, 0);
}

static createKindsVector(builder:flatbuffers.Builder, data:number[]|Uint16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createKindsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createKindsVector(builder:flatbuffers.Builder, data:number[]|Uint16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startKindsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static addPubkey(builder:flatbuffers.Builder, pubkeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pubkeyOffset, 0);
}

static endCounterPipeConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // kinds
  builder.requiredField(offset, 6) // pubkey
  return offset;
}

static createCounterPipeConfig(builder:flatbuffers.Builder, kindsOffset:flatbuffers.Offset, pubkeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  CounterPipeConfig.startCounterPipeConfig(builder);
  CounterPipeConfig.addKinds(builder, kindsOffset);
  CounterPipeConfig.addPubkey(builder, pubkeyOffset);
  return CounterPipeConfig.endCounterPipeConfig(builder);
}

unpack(): CounterPipeConfigT {
  return new CounterPipeConfigT(
    this.bb!.createScalarList<number>(this.kinds.bind(this), this.kindsLength()),
    this.pubkey()
  );
}


unpackTo(_o: CounterPipeConfigT): void {
  _o.kinds = this.bb!.createScalarList<number>(this.kinds.bind(this), this.kindsLength());
  _o.pubkey = this.pubkey();
}
}

export class CounterPipeConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public kinds: (number)[] = [],
  public pubkey: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const kinds = CounterPipeConfig.createKindsVector(builder, this.kinds);
  const pubkey = (this.pubkey !== null ? builder.createString(this.pubkey!) : 0);

  return CounterPipeConfig.createCounterPipeConfig(builder,
    kinds,
    pubkey
  );
}
}
