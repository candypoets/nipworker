import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class ConnectionStatus implements flatbuffers.IUnpackableObject<ConnectionStatusT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConnectionStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConnectionStatus(bb:flatbuffers.ByteBuffer, obj?:ConnectionStatus):ConnectionStatus {
  return (obj || new ConnectionStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConnectionStatus(bb:flatbuffers.ByteBuffer, obj?:ConnectionStatus):ConnectionStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConnectionStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

relayUrl(): ByteString|null
relayUrl(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
relayUrl(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

status(): ByteString|null
status(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
status(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

message(): ByteString|null
message(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
message(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startConnectionStatus(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRelayUrl(builder:flatbuffers.Builder, relayUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, relayUrlOffset, 0);
}

static addStatus(builder:flatbuffers.Builder, statusOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, statusOffset, 0);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, messageOffset, 0);
}

static endConnectionStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // relay_url
  builder.requiredField(offset, 6) // status
  return offset;
}

static createConnectionStatus(builder:flatbuffers.Builder, relayUrlOffset:flatbuffers.Offset, statusOffset:flatbuffers.Offset, messageOffset:flatbuffers.Offset):flatbuffers.Offset {
  ConnectionStatus.startConnectionStatus(builder);
  ConnectionStatus.addRelayUrl(builder, relayUrlOffset);
  ConnectionStatus.addStatus(builder, statusOffset);
  ConnectionStatus.addMessage(builder, messageOffset);
  return ConnectionStatus.endConnectionStatus(builder);
}

unpack(): ConnectionStatusT {
  return new ConnectionStatusT(
    this.relayUrl(),
    this.status(),
    this.message()
  );
}


unpackTo(_o: ConnectionStatusT): void {
  _o.relayUrl = this.relayUrl();
  _o.status = this.status();
  _o.message = this.message();
}
}

export class ConnectionStatusT implements flatbuffers.IGeneratedObject {
constructor(
  public relayUrl: ByteString|Uint8Array|null = null,
  public status: ByteString|Uint8Array|null = null,
  public message: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const relayUrl = (this.relayUrl !== null ? builder.createString(this.relayUrl!) : 0);
  const status = (this.status !== null ? builder.createString(this.status!) : 0);
  const message = (this.message !== null ? builder.createString(this.message!) : 0);

  return ConnectionStatus.createConnectionStatus(builder,
    relayUrl,
    status,
    message
  );
}
}
