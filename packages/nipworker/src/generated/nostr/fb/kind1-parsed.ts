import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ContentBlock, ContentBlockT } from '../../nostr/fb/content-block.js';
import { EventPointer, EventPointerT } from '../../nostr/fb/event-pointer.js';
import { ProfilePointer, ProfilePointerT } from '../../nostr/fb/profile-pointer.js';


export class Kind1Parsed implements flatbuffers.IUnpackableObject<Kind1ParsedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Kind1Parsed {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKind1Parsed(bb:flatbuffers.ByteBuffer, obj?:Kind1Parsed):Kind1Parsed {
  return (obj || new Kind1Parsed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKind1Parsed(bb:flatbuffers.ByteBuffer, obj?:Kind1Parsed):Kind1Parsed {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Kind1Parsed()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

parsedContent(index: number, obj?:ContentBlock):ContentBlock|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContentBlock()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

parsedContentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

shortenedContent(index: number, obj?:ContentBlock):ContentBlock|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ContentBlock()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

shortenedContentLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

quotes(index: number, obj?:ProfilePointer):ProfilePointer|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ProfilePointer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

quotesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mentions(index: number, obj?:EventPointer):EventPointer|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new EventPointer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mentionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

reply(obj?:EventPointer):EventPointer|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new EventPointer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

root(obj?:EventPointer):EventPointer|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new EventPointer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startKind1Parsed(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addParsedContent(builder:flatbuffers.Builder, parsedContentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, parsedContentOffset, 0);
}

static createParsedContentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startParsedContentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addShortenedContent(builder:flatbuffers.Builder, shortenedContentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, shortenedContentOffset, 0);
}

static createShortenedContentVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startShortenedContentVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addQuotes(builder:flatbuffers.Builder, quotesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, quotesOffset, 0);
}

static createQuotesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startQuotesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMentions(builder:flatbuffers.Builder, mentionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, mentionsOffset, 0);
}

static createMentionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMentionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReply(builder:flatbuffers.Builder, replyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, replyOffset, 0);
}

static addRoot(builder:flatbuffers.Builder, rootOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, rootOffset, 0);
}

static endKind1Parsed(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // parsed_content
  return offset;
}


unpack(): Kind1ParsedT {
  return new Kind1ParsedT(
    this.bb!.createObjList<ContentBlock, ContentBlockT>(this.parsedContent.bind(this), this.parsedContentLength()),
    this.bb!.createObjList<ContentBlock, ContentBlockT>(this.shortenedContent.bind(this), this.shortenedContentLength()),
    this.bb!.createObjList<ProfilePointer, ProfilePointerT>(this.quotes.bind(this), this.quotesLength()),
    this.bb!.createObjList<EventPointer, EventPointerT>(this.mentions.bind(this), this.mentionsLength()),
    (this.reply() !== null ? this.reply()!.unpack() : null),
    (this.root() !== null ? this.root()!.unpack() : null)
  );
}


unpackTo(_o: Kind1ParsedT): void {
  _o.parsedContent = this.bb!.createObjList<ContentBlock, ContentBlockT>(this.parsedContent.bind(this), this.parsedContentLength());
  _o.shortenedContent = this.bb!.createObjList<ContentBlock, ContentBlockT>(this.shortenedContent.bind(this), this.shortenedContentLength());
  _o.quotes = this.bb!.createObjList<ProfilePointer, ProfilePointerT>(this.quotes.bind(this), this.quotesLength());
  _o.mentions = this.bb!.createObjList<EventPointer, EventPointerT>(this.mentions.bind(this), this.mentionsLength());
  _o.reply = (this.reply() !== null ? this.reply()!.unpack() : null);
  _o.root = (this.root() !== null ? this.root()!.unpack() : null);
}
}

export class Kind1ParsedT implements flatbuffers.IGeneratedObject {
constructor(
  public parsedContent: (ContentBlockT)[] = [],
  public shortenedContent: (ContentBlockT)[] = [],
  public quotes: (ProfilePointerT)[] = [],
  public mentions: (EventPointerT)[] = [],
  public reply: EventPointerT|null = null,
  public root: EventPointerT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const parsedContent = Kind1Parsed.createParsedContentVector(builder, builder.createObjectOffsetList(this.parsedContent));
  const shortenedContent = Kind1Parsed.createShortenedContentVector(builder, builder.createObjectOffsetList(this.shortenedContent));
  const quotes = Kind1Parsed.createQuotesVector(builder, builder.createObjectOffsetList(this.quotes));
  const mentions = Kind1Parsed.createMentionsVector(builder, builder.createObjectOffsetList(this.mentions));
  const reply = (this.reply !== null ? this.reply!.pack(builder) : 0);
  const root = (this.root !== null ? this.root!.pack(builder) : 0);

  Kind1Parsed.startKind1Parsed(builder);
  Kind1Parsed.addParsedContent(builder, parsedContent);
  Kind1Parsed.addShortenedContent(builder, shortenedContent);
  Kind1Parsed.addQuotes(builder, quotes);
  Kind1Parsed.addMentions(builder, mentions);
  Kind1Parsed.addReply(builder, reply);
  Kind1Parsed.addRoot(builder, root);

  return Kind1Parsed.endKind1Parsed(builder);
}
}
