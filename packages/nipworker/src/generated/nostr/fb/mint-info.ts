import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class MintInfo implements flatbuffers.IUnpackableObject<MintInfoT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MintInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMintInfo(bb:flatbuffers.ByteBuffer, obj?:MintInfo):MintInfo {
  return (obj || new MintInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMintInfo(bb:flatbuffers.ByteBuffer, obj?:MintInfo):MintInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MintInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

url(): ByteString|null
url(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
url(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

baseUnits(index: number): ByteString
baseUnits(index: number,optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array
baseUnits(index: number,optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

baseUnitsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMintInfo(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addUrl(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, urlOffset, 0);
}

static addBaseUnits(builder:flatbuffers.Builder, baseUnitsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, baseUnitsOffset, 0);
}

static createBaseUnitsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBaseUnitsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMintInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // url
  builder.requiredField(offset, 6) // base_units
  return offset;
}

static createMintInfo(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset, baseUnitsOffset:flatbuffers.Offset):flatbuffers.Offset {
  MintInfo.startMintInfo(builder);
  MintInfo.addUrl(builder, urlOffset);
  MintInfo.addBaseUnits(builder, baseUnitsOffset);
  return MintInfo.endMintInfo(builder);
}

unpack(): MintInfoT {
  return new MintInfoT(
    this.url(),
    this.bb!.createScalarList<string>(this.baseUnits.bind(this), this.baseUnitsLength())
  );
}


unpackTo(_o: MintInfoT): void {
  _o.url = this.url();
  _o.baseUnits = this.bb!.createScalarList<string>(this.baseUnits.bind(this), this.baseUnitsLength());
}
}

export class MintInfoT implements flatbuffers.IGeneratedObject {
constructor(
  public url: ByteString|Uint8Array|null = null,
  public baseUnits: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const url = (this.url !== null ? builder.createString(this.url!) : 0);
  const baseUnits = MintInfo.createBaseUnitsVector(builder, builder.createObjectOffsetList(this.baseUnits));

  return MintInfo.createMintInfo(builder,
    url,
    baseUnits
  );
}
}
