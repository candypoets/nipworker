import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { HTLCWitness, HTLCWitnessT } from '../../nostr/fb/htlcwitness.js';
import { P2PKWitness, P2PKWitnessT } from '../../nostr/fb/p2-pkwitness.js';
import { WitnessString, WitnessStringT } from '../../nostr/fb/witness-string.js';


export enum Witness {
  NONE = 0,
  WitnessString = 1,
  P2PKWitness = 2,
  HTLCWitness = 3
}

export function unionToWitness(
  type: Witness,
  accessor: (obj:HTLCWitness|P2PKWitness|WitnessString) => HTLCWitness|P2PKWitness|WitnessString|null
): HTLCWitness|P2PKWitness|WitnessString|null {
  switch(Witness[type]) {
    case 'NONE': return null; 
    case 'WitnessString': return accessor(new WitnessString())! as WitnessString;
    case 'P2PKWitness': return accessor(new P2PKWitness())! as P2PKWitness;
    case 'HTLCWitness': return accessor(new HTLCWitness())! as HTLCWitness;
    default: return null;
  }
}

export function unionListToWitness(
  type: Witness, 
  accessor: (index: number, obj:HTLCWitness|P2PKWitness|WitnessString) => HTLCWitness|P2PKWitness|WitnessString|null, 
  index: number
): HTLCWitness|P2PKWitness|WitnessString|null {
  switch(Witness[type]) {
    case 'NONE': return null; 
    case 'WitnessString': return accessor(index, new WitnessString())! as WitnessString;
    case 'P2PKWitness': return accessor(index, new P2PKWitness())! as P2PKWitness;
    case 'HTLCWitness': return accessor(index, new HTLCWitness())! as HTLCWitness;
    default: return null;
  }
}
