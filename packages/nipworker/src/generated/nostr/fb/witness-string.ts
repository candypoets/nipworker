import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class WitnessString implements flatbuffers.IUnpackableObject<WitnessStringT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):WitnessString {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWitnessString(bb:flatbuffers.ByteBuffer, obj?:WitnessString):WitnessString {
  return (obj || new WitnessString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWitnessString(bb:flatbuffers.ByteBuffer, obj?:WitnessString):WitnessString {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WitnessString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value(): ByteString|null
value(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
value(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startWitnessString(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valueOffset, 0);
}

static endWitnessString(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createWitnessString(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  WitnessString.startWitnessString(builder);
  WitnessString.addValue(builder, valueOffset);
  return WitnessString.endWitnessString(builder);
}

unpack(): WitnessStringT {
  return new WitnessStringT(
    this.value()
  );
}


unpackTo(_o: WitnessStringT): void {
  _o.value = this.value();
}
}

export class WitnessStringT implements flatbuffers.IGeneratedObject {
constructor(
  public value: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const value = (this.value !== null ? builder.createString(this.value!) : 0);

  return WitnessString.createWitnessString(builder,
    value
  );
}
}
