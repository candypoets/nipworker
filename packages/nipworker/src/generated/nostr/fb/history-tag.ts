import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class HistoryTag implements flatbuffers.IUnpackableObject<HistoryTagT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HistoryTag {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHistoryTag(bb:flatbuffers.ByteBuffer, obj?:HistoryTag):HistoryTag {
  return (obj || new HistoryTag()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHistoryTag(bb:flatbuffers.ByteBuffer, obj?:HistoryTag):HistoryTag {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HistoryTag()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name(): ByteString|null
name(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
name(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

value(): ByteString|null
value(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
value(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

relay(): ByteString|null
relay(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
relay(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

marker(): ByteString|null
marker(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
marker(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startHistoryTag(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static addRelay(builder:flatbuffers.Builder, relayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, relayOffset, 0);
}

static addMarker(builder:flatbuffers.Builder, markerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, markerOffset, 0);
}

static endHistoryTag(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // name
  builder.requiredField(offset, 6) // value
  return offset;
}

static createHistoryTag(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, valueOffset:flatbuffers.Offset, relayOffset:flatbuffers.Offset, markerOffset:flatbuffers.Offset):flatbuffers.Offset {
  HistoryTag.startHistoryTag(builder);
  HistoryTag.addName(builder, nameOffset);
  HistoryTag.addValue(builder, valueOffset);
  HistoryTag.addRelay(builder, relayOffset);
  HistoryTag.addMarker(builder, markerOffset);
  return HistoryTag.endHistoryTag(builder);
}

unpack(): HistoryTagT {
  return new HistoryTagT(
    this.name(),
    this.value(),
    this.relay(),
    this.marker()
  );
}


unpackTo(_o: HistoryTagT): void {
  _o.name = this.name();
  _o.value = this.value();
  _o.relay = this.relay();
  _o.marker = this.marker();
}
}

export class HistoryTagT implements flatbuffers.IGeneratedObject {
constructor(
  public name: ByteString|Uint8Array|null = null,
  public value: ByteString|Uint8Array|null = null,
  public relay: ByteString|Uint8Array|null = null,
  public marker: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const value = (this.value !== null ? builder.createString(this.value!) : 0);
  const relay = (this.relay !== null ? builder.createString(this.relay!) : 0);
  const marker = (this.marker !== null ? builder.createString(this.marker!) : 0);

  return HistoryTag.createHistoryTag(builder,
    name,
    value,
    relay,
    marker
  );
}
}
