import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class LinkPreviewData implements flatbuffers.IUnpackableObject<LinkPreviewDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LinkPreviewData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLinkPreviewData(bb:flatbuffers.ByteBuffer, obj?:LinkPreviewData):LinkPreviewData {
  return (obj || new LinkPreviewData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLinkPreviewData(bb:flatbuffers.ByteBuffer, obj?:LinkPreviewData):LinkPreviewData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LinkPreviewData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

url(): ByteString|null
url(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
url(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

title(): ByteString|null
title(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
title(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

description(): ByteString|null
description(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
description(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

image(): ByteString|null
image(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
image(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startLinkPreviewData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addUrl(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, urlOffset, 0);
}

static addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, titleOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, descriptionOffset, 0);
}

static addImage(builder:flatbuffers.Builder, imageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, imageOffset, 0);
}

static endLinkPreviewData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // url
  return offset;
}

static createLinkPreviewData(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset, titleOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, imageOffset:flatbuffers.Offset):flatbuffers.Offset {
  LinkPreviewData.startLinkPreviewData(builder);
  LinkPreviewData.addUrl(builder, urlOffset);
  LinkPreviewData.addTitle(builder, titleOffset);
  LinkPreviewData.addDescription(builder, descriptionOffset);
  LinkPreviewData.addImage(builder, imageOffset);
  return LinkPreviewData.endLinkPreviewData(builder);
}

unpack(): LinkPreviewDataT {
  return new LinkPreviewDataT(
    this.url(),
    this.title(),
    this.description(),
    this.image()
  );
}


unpackTo(_o: LinkPreviewDataT): void {
  _o.url = this.url();
  _o.title = this.title();
  _o.description = this.description();
  _o.image = this.image();
}
}

export class LinkPreviewDataT implements flatbuffers.IGeneratedObject {
constructor(
  public url: ByteString|Uint8Array|null = null,
  public title: ByteString|Uint8Array|null = null,
  public description: ByteString|Uint8Array|null = null,
  public image: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const url = (this.url !== null ? builder.createString(this.url!) : 0);
  const title = (this.title !== null ? builder.createString(this.title!) : 0);
  const description = (this.description !== null ? builder.createString(this.description!) : 0);
  const image = (this.image !== null ? builder.createString(this.image!) : 0);

  return LinkPreviewData.createLinkPreviewData(builder,
    url,
    title,
    description,
    image
  );
}
}
