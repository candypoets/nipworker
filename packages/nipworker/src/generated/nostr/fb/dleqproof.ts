import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class DLEQProof implements flatbuffers.IUnpackableObject<DLEQProofT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DLEQProof {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDLEQProof(bb:flatbuffers.ByteBuffer, obj?:DLEQProof):DLEQProof {
  return (obj || new DLEQProof()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDLEQProof(bb:flatbuffers.ByteBuffer, obj?:DLEQProof):DLEQProof {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DLEQProof()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

e(): ByteString|null
e(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
e(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

s(): ByteString|null
s(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
s(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

r(): ByteString|null
r(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
r(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startDLEQProof(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addE(builder:flatbuffers.Builder, eOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, eOffset, 0);
}

static addS(builder:flatbuffers.Builder, sOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sOffset, 0);
}

static addR(builder:flatbuffers.Builder, rOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rOffset, 0);
}

static endDLEQProof(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // e
  builder.requiredField(offset, 6) // s
  builder.requiredField(offset, 8) // r
  return offset;
}

static createDLEQProof(builder:flatbuffers.Builder, eOffset:flatbuffers.Offset, sOffset:flatbuffers.Offset, rOffset:flatbuffers.Offset):flatbuffers.Offset {
  DLEQProof.startDLEQProof(builder);
  DLEQProof.addE(builder, eOffset);
  DLEQProof.addS(builder, sOffset);
  DLEQProof.addR(builder, rOffset);
  return DLEQProof.endDLEQProof(builder);
}

unpack(): DLEQProofT {
  return new DLEQProofT(
    this.e(),
    this.s(),
    this.r()
  );
}


unpackTo(_o: DLEQProofT): void {
  _o.e = this.e();
  _o.s = this.s();
  _o.r = this.r();
}
}

export class DLEQProofT implements flatbuffers.IGeneratedObject {
constructor(
  public e: ByteString|Uint8Array|null = null,
  public s: ByteString|Uint8Array|null = null,
  public r: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const e = (this.e !== null ? builder.createString(this.e!) : 0);
  const s = (this.s !== null ? builder.createString(this.s!) : 0);
  const r = (this.r !== null ? builder.createString(this.r!) : 0);

  return DLEQProof.createDLEQProof(builder,
    e,
    s,
    r
  );
}
}
