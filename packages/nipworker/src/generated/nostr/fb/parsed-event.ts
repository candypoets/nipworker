import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Kind0Parsed, Kind0ParsedT } from '../../nostr/fb/kind0-parsed.js';
import { Kind10002Parsed, Kind10002ParsedT } from '../../nostr/fb/kind10002-parsed.js';
import { Kind10019Parsed, Kind10019ParsedT } from '../../nostr/fb/kind10019-parsed.js';
import { Kind17375Parsed, Kind17375ParsedT } from '../../nostr/fb/kind17375-parsed.js';
import { Kind17Parsed, Kind17ParsedT } from '../../nostr/fb/kind17-parsed.js';
import { Kind1Parsed, Kind1ParsedT } from '../../nostr/fb/kind1-parsed.js';
import { Kind39089Parsed, Kind39089ParsedT } from '../../nostr/fb/kind39089-parsed.js';
import { Kind3Parsed, Kind3ParsedT } from '../../nostr/fb/kind3-parsed.js';
import { Kind4Parsed, Kind4ParsedT } from '../../nostr/fb/kind4-parsed.js';
import { Kind6Parsed, Kind6ParsedT } from '../../nostr/fb/kind6-parsed.js';
import { Kind7374Parsed, Kind7374ParsedT } from '../../nostr/fb/kind7374-parsed.js';
import { Kind7375Parsed, Kind7375ParsedT } from '../../nostr/fb/kind7375-parsed.js';
import { Kind7376Parsed, Kind7376ParsedT } from '../../nostr/fb/kind7376-parsed.js';
import { Kind7Parsed, Kind7ParsedT } from '../../nostr/fb/kind7-parsed.js';
import { Kind9321Parsed, Kind9321ParsedT } from '../../nostr/fb/kind9321-parsed.js';
import { Kind9735Parsed, Kind9735ParsedT } from '../../nostr/fb/kind9735-parsed.js';
import { ParsedData, unionToParsedData, unionListToParsedData } from '../../nostr/fb/parsed-data.js';
import { Request, RequestT } from '../../nostr/fb/request.js';


export class ParsedEvent implements flatbuffers.IUnpackableObject<ParsedEventT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ParsedEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsParsedEvent(bb:flatbuffers.ByteBuffer, obj?:ParsedEvent):ParsedEvent {
  return (obj || new ParsedEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsParsedEvent(bb:flatbuffers.ByteBuffer, obj?:ParsedEvent):ParsedEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ParsedEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id(): ByteString|null
id(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
id(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

pubkey(): ByteString|null
pubkey(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
pubkey(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

kind():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

createdAt():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

parsedType():ParsedData {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ParsedData.NONE;
}

parsed<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

requests(index: number, obj?:Request):Request|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Request()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

requestsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

relays(index: number): ByteString
relays(index: number,optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array
relays(index: number,optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__stringByteString(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

relaysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startParsedEvent(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addPubkey(builder:flatbuffers.Builder, pubkeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pubkeyOffset, 0);
}

static addKind(builder:flatbuffers.Builder, kind:number) {
  builder.addFieldInt16(2, kind, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAt:number) {
  builder.addFieldInt32(3, createdAt, 0);
}

static addParsedType(builder:flatbuffers.Builder, parsedType:ParsedData) {
  builder.addFieldInt8(4, parsedType, ParsedData.NONE);
}

static addParsed(builder:flatbuffers.Builder, parsedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, parsedOffset, 0);
}

static addRequests(builder:flatbuffers.Builder, requestsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, requestsOffset, 0);
}

static createRequestsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRequestsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRelays(builder:flatbuffers.Builder, relaysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, relaysOffset, 0);
}

static createRelaysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRelaysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endParsedEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  builder.requiredField(offset, 6) // pubkey
  return offset;
}

static createParsedEvent(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, pubkeyOffset:flatbuffers.Offset, kind:number, createdAt:number, parsedType:ParsedData, parsedOffset:flatbuffers.Offset, requestsOffset:flatbuffers.Offset, relaysOffset:flatbuffers.Offset):flatbuffers.Offset {
  ParsedEvent.startParsedEvent(builder);
  ParsedEvent.addId(builder, idOffset);
  ParsedEvent.addPubkey(builder, pubkeyOffset);
  ParsedEvent.addKind(builder, kind);
  ParsedEvent.addCreatedAt(builder, createdAt);
  ParsedEvent.addParsedType(builder, parsedType);
  ParsedEvent.addParsed(builder, parsedOffset);
  ParsedEvent.addRequests(builder, requestsOffset);
  ParsedEvent.addRelays(builder, relaysOffset);
  return ParsedEvent.endParsedEvent(builder);
}

unpack(): ParsedEventT {
  return new ParsedEventT(
    this.id(),
    this.pubkey(),
    this.kind(),
    this.createdAt(),
    this.parsedType(),
    (() => {
      const temp = unionToParsedData(this.parsedType(), this.parsed.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })(),
    this.bb!.createObjList<Request, RequestT>(this.requests.bind(this), this.requestsLength()),
    this.bb!.createScalarList<string>(this.relays.bind(this), this.relaysLength())
  );
}


unpackTo(_o: ParsedEventT): void {
  _o.id = this.id();
  _o.pubkey = this.pubkey();
  _o.kind = this.kind();
  _o.createdAt = this.createdAt();
  _o.parsedType = this.parsedType();
  _o.parsed = (() => {
      const temp = unionToParsedData(this.parsedType(), this.parsed.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
  _o.requests = this.bb!.createObjList<Request, RequestT>(this.requests.bind(this), this.requestsLength());
  _o.relays = this.bb!.createScalarList<string>(this.relays.bind(this), this.relaysLength());
}
}

export class ParsedEventT implements flatbuffers.IGeneratedObject {
constructor(
  public id: ByteString|Uint8Array|null = null,
  public pubkey: ByteString|Uint8Array|null = null,
  public kind: number = 0,
  public createdAt: number = 0,
  public parsedType: ParsedData = ParsedData.NONE,
  public parsed: Kind0ParsedT|Kind10002ParsedT|Kind10019ParsedT|Kind17375ParsedT|Kind17ParsedT|Kind1ParsedT|Kind39089ParsedT|Kind3ParsedT|Kind4ParsedT|Kind6ParsedT|Kind7374ParsedT|Kind7375ParsedT|Kind7376ParsedT|Kind7ParsedT|Kind9321ParsedT|Kind9735ParsedT|null = null,
  public requests: (RequestT)[] = [],
  public relays: (string)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const pubkey = (this.pubkey !== null ? builder.createString(this.pubkey!) : 0);
  const parsed = builder.createObjectOffset(this.parsed);
  const requests = ParsedEvent.createRequestsVector(builder, builder.createObjectOffsetList(this.requests));
  const relays = ParsedEvent.createRelaysVector(builder, builder.createObjectOffsetList(this.relays));

  return ParsedEvent.createParsedEvent(builder,
    id,
    pubkey,
    this.kind,
    this.createdAt,
    this.parsedType,
    parsed,
    requests,
    relays
  );
}
}
