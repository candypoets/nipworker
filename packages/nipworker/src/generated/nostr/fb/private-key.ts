import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class PrivateKey implements flatbuffers.IUnpackableObject<PrivateKeyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PrivateKey {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPrivateKey(bb:flatbuffers.ByteBuffer, obj?:PrivateKey):PrivateKey {
  return (obj || new PrivateKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPrivateKey(bb:flatbuffers.ByteBuffer, obj?:PrivateKey):PrivateKey {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PrivateKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

privateKey(): ByteString|null
privateKey(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
privateKey(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startPrivateKey(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPrivateKey(builder:flatbuffers.Builder, privateKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, privateKeyOffset, 0);
}

static endPrivateKey(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // private_key
  return offset;
}

static createPrivateKey(builder:flatbuffers.Builder, privateKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  PrivateKey.startPrivateKey(builder);
  PrivateKey.addPrivateKey(builder, privateKeyOffset);
  return PrivateKey.endPrivateKey(builder);
}

unpack(): PrivateKeyT {
  return new PrivateKeyT(
    this.privateKey()
  );
}


unpackTo(_o: PrivateKeyT): void {
  _o.privateKey = this.privateKey();
}
}

export class PrivateKeyT implements flatbuffers.IGeneratedObject {
constructor(
  public privateKey: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const privateKey = (this.privateKey !== null ? builder.createString(this.privateKey!) : 0);

  return PrivateKey.createPrivateKey(builder,
    privateKey
  );
}
}
