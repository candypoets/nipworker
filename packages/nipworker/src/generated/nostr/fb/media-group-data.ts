import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MediaItem, MediaItemT } from '../../nostr/fb/media-item.js';


export class MediaGroupData implements flatbuffers.IUnpackableObject<MediaGroupDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MediaGroupData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMediaGroupData(bb:flatbuffers.ByteBuffer, obj?:MediaGroupData):MediaGroupData {
  return (obj || new MediaGroupData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMediaGroupData(bb:flatbuffers.ByteBuffer, obj?:MediaGroupData):MediaGroupData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MediaGroupData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

items(index: number, obj?:MediaItem):MediaItem|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MediaItem()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

itemsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMediaGroupData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addItems(builder:flatbuffers.Builder, itemsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, itemsOffset, 0);
}

static createItemsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startItemsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMediaGroupData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMediaGroupData(builder:flatbuffers.Builder, itemsOffset:flatbuffers.Offset):flatbuffers.Offset {
  MediaGroupData.startMediaGroupData(builder);
  MediaGroupData.addItems(builder, itemsOffset);
  return MediaGroupData.endMediaGroupData(builder);
}

unpack(): MediaGroupDataT {
  return new MediaGroupDataT(
    this.bb!.createObjList<MediaItem, MediaItemT>(this.items.bind(this), this.itemsLength())
  );
}


unpackTo(_o: MediaGroupDataT): void {
  _o.items = this.bb!.createObjList<MediaItem, MediaItemT>(this.items.bind(this), this.itemsLength());
}
}

export class MediaGroupDataT implements flatbuffers.IGeneratedObject {
constructor(
  public items: (MediaItemT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const items = MediaGroupData.createItemsVector(builder, builder.createObjectOffsetList(this.items));

  return MediaGroupData.createMediaGroupData(builder,
    items
  );
}
}
