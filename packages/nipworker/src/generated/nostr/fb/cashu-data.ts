import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class CashuData implements flatbuffers.IUnpackableObject<CashuDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CashuData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCashuData(bb:flatbuffers.ByteBuffer, obj?:CashuData):CashuData {
  return (obj || new CashuData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCashuData(bb:flatbuffers.ByteBuffer, obj?:CashuData):CashuData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CashuData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

token(): ByteString|null
token(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
token(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startCashuData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addToken(builder:flatbuffers.Builder, tokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tokenOffset, 0);
}

static endCashuData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // token
  return offset;
}

static createCashuData(builder:flatbuffers.Builder, tokenOffset:flatbuffers.Offset):flatbuffers.Offset {
  CashuData.startCashuData(builder);
  CashuData.addToken(builder, tokenOffset);
  return CashuData.endCashuData(builder);
}

unpack(): CashuDataT {
  return new CashuDataT(
    this.token()
  );
}


unpackTo(_o: CashuDataT): void {
  _o.token = this.token();
}
}

export class CashuDataT implements flatbuffers.IGeneratedObject {
constructor(
  public token: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const token = (this.token !== null ? builder.createString(this.token!) : 0);

  return CashuData.createCashuData(builder,
    token
  );
}
}
