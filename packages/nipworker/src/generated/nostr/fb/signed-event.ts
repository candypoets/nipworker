import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { NostrEvent, NostrEventT } from '../../nostr/fb/nostr-event.js';


export class SignedEvent implements flatbuffers.IUnpackableObject<SignedEventT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SignedEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSignedEvent(bb:flatbuffers.ByteBuffer, obj?:SignedEvent):SignedEvent {
  return (obj || new SignedEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSignedEvent(bb:flatbuffers.ByteBuffer, obj?:SignedEvent):SignedEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SignedEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

event(obj?:NostrEvent):NostrEvent|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new NostrEvent()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSignedEvent(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addEvent(builder:flatbuffers.Builder, eventOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, eventOffset, 0);
}

static endSignedEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // event
  return offset;
}

static createSignedEvent(builder:flatbuffers.Builder, eventOffset:flatbuffers.Offset):flatbuffers.Offset {
  SignedEvent.startSignedEvent(builder);
  SignedEvent.addEvent(builder, eventOffset);
  return SignedEvent.endSignedEvent(builder);
}

unpack(): SignedEventT {
  return new SignedEventT(
    (this.event() !== null ? this.event()!.unpack() : null)
  );
}


unpackTo(_o: SignedEventT): void {
  _o.event = (this.event() !== null ? this.event()!.unpack() : null);
}
}

export class SignedEventT implements flatbuffers.IGeneratedObject {
constructor(
  public event: NostrEventT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const event = (this.event !== null ? this.event!.pack(builder) : 0);

  return SignedEvent.createSignedEvent(builder,
    event
  );
}
}
