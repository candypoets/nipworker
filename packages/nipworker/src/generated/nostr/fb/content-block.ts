import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CashuData, CashuDataT } from '../../nostr/fb/cashu-data.js';
import { CodeData, CodeDataT } from '../../nostr/fb/code-data.js';
import { ContentData, unionToContentData, unionListToContentData } from '../../nostr/fb/content-data.js';
import { HashtagData, HashtagDataT } from '../../nostr/fb/hashtag-data.js';
import { ImageData, ImageDataT } from '../../nostr/fb/image-data.js';
import { LinkPreviewData, LinkPreviewDataT } from '../../nostr/fb/link-preview-data.js';
import { MediaGroupData, MediaGroupDataT } from '../../nostr/fb/media-group-data.js';
import { NostrData, NostrDataT } from '../../nostr/fb/nostr-data.js';
import { VideoData, VideoDataT } from '../../nostr/fb/video-data.js';


export class ContentBlock implements flatbuffers.IUnpackableObject<ContentBlockT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ContentBlock {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsContentBlock(bb:flatbuffers.ByteBuffer, obj?:ContentBlock):ContentBlock {
  return (obj || new ContentBlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsContentBlock(bb:flatbuffers.ByteBuffer, obj?:ContentBlock):ContentBlock {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ContentBlock()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type(): ByteString|null
type(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
type(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

text(): ByteString|null
text(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
text(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

dataType():ContentData {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ContentData.NONE;
}

data<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startContentBlock(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, textOffset, 0);
}

static addDataType(builder:flatbuffers.Builder, dataType:ContentData) {
  builder.addFieldInt8(2, dataType, ContentData.NONE);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dataOffset, 0);
}

static endContentBlock(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // type
  builder.requiredField(offset, 6) // text
  return offset;
}

static createContentBlock(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, textOffset:flatbuffers.Offset, dataType:ContentData, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  ContentBlock.startContentBlock(builder);
  ContentBlock.addType(builder, typeOffset);
  ContentBlock.addText(builder, textOffset);
  ContentBlock.addDataType(builder, dataType);
  ContentBlock.addData(builder, dataOffset);
  return ContentBlock.endContentBlock(builder);
}

unpack(): ContentBlockT {
  return new ContentBlockT(
    this.type(),
    this.text(),
    this.dataType(),
    (() => {
      const temp = unionToContentData(this.dataType(), this.data.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: ContentBlockT): void {
  _o.type = this.type();
  _o.text = this.text();
  _o.dataType = this.dataType();
  _o.data = (() => {
      const temp = unionToContentData(this.dataType(), this.data.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class ContentBlockT implements flatbuffers.IGeneratedObject {
constructor(
  public type: ByteString|Uint8Array|null = null,
  public text: ByteString|Uint8Array|null = null,
  public dataType: ContentData = ContentData.NONE,
  public data: CashuDataT|CodeDataT|HashtagDataT|ImageDataT|LinkPreviewDataT|MediaGroupDataT|NostrDataT|VideoDataT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const text = (this.text !== null ? builder.createString(this.text!) : 0);
  const data = builder.createObjectOffset(this.data);

  return ContentBlock.createContentBlock(builder,
    type,
    text,
    this.dataType,
    data
  );
}
}
