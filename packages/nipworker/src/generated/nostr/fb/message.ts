import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { BufferFull, BufferFullT } from '../../nostr/fb/buffer-full.js';
import { ConnectionStatus, ConnectionStatusT } from '../../nostr/fb/connection-status.js';
import { CountResponse, CountResponseT } from '../../nostr/fb/count-response.js';
import { Eoce, EoceT } from '../../nostr/fb/eoce.js';
import { ParsedEvent, ParsedEventT } from '../../nostr/fb/parsed-event.js';
import { ValidProofs, ValidProofsT } from '../../nostr/fb/valid-proofs.js';


export enum Message {
  NONE = 0,
  ParsedEvent = 1,
  ConnectionStatus = 2,
  CountResponse = 3,
  Eoce = 4,
  BufferFull = 5,
  ValidProofs = 6
}

export function unionToMessage(
  type: Message,
  accessor: (obj:BufferFull|ConnectionStatus|CountResponse|Eoce|ParsedEvent|ValidProofs) => BufferFull|ConnectionStatus|CountResponse|Eoce|ParsedEvent|ValidProofs|null
): BufferFull|ConnectionStatus|CountResponse|Eoce|ParsedEvent|ValidProofs|null {
  switch(Message[type]) {
    case 'NONE': return null; 
    case 'ParsedEvent': return accessor(new ParsedEvent())! as ParsedEvent;
    case 'ConnectionStatus': return accessor(new ConnectionStatus())! as ConnectionStatus;
    case 'CountResponse': return accessor(new CountResponse())! as CountResponse;
    case 'Eoce': return accessor(new Eoce())! as Eoce;
    case 'BufferFull': return accessor(new BufferFull())! as BufferFull;
    case 'ValidProofs': return accessor(new ValidProofs())! as ValidProofs;
    default: return null;
  }
}

export function unionListToMessage(
  type: Message, 
  accessor: (index: number, obj:BufferFull|ConnectionStatus|CountResponse|Eoce|ParsedEvent|ValidProofs) => BufferFull|ConnectionStatus|CountResponse|Eoce|ParsedEvent|ValidProofs|null, 
  index: number
): BufferFull|ConnectionStatus|CountResponse|Eoce|ParsedEvent|ValidProofs|null {
  switch(Message[type]) {
    case 'NONE': return null; 
    case 'ParsedEvent': return accessor(index, new ParsedEvent())! as ParsedEvent;
    case 'ConnectionStatus': return accessor(index, new ConnectionStatus())! as ConnectionStatus;
    case 'CountResponse': return accessor(index, new CountResponse())! as CountResponse;
    case 'Eoce': return accessor(index, new Eoce())! as Eoce;
    case 'BufferFull': return accessor(index, new BufferFull())! as BufferFull;
    case 'ValidProofs': return accessor(index, new ValidProofs())! as ValidProofs;
    default: return null;
  }
}
