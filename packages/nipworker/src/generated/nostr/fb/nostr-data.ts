import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class NostrData implements flatbuffers.IUnpackableObject<NostrDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NostrData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNostrData(bb:flatbuffers.ByteBuffer, obj?:NostrData):NostrData {
  return (obj || new NostrData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNostrData(bb:flatbuffers.ByteBuffer, obj?:NostrData):NostrData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NostrData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id(): ByteString|null
id(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
id(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

relays(index: number): ByteString
relays(index: number,optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array
relays(index: number,optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

relaysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

author(): ByteString|null
author(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
author(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

kind():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startNostrData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addRelays(builder:flatbuffers.Builder, relaysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, relaysOffset, 0);
}

static createRelaysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRelaysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAuthor(builder:flatbuffers.Builder, authorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, authorOffset, 0);
}

static addKind(builder:flatbuffers.Builder, kind:bigint) {
  builder.addFieldInt64(3, kind, BigInt('0'));
}

static endNostrData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // id
  return offset;
}

static createNostrData(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, relaysOffset:flatbuffers.Offset, authorOffset:flatbuffers.Offset, kind:bigint):flatbuffers.Offset {
  NostrData.startNostrData(builder);
  NostrData.addId(builder, idOffset);
  NostrData.addRelays(builder, relaysOffset);
  NostrData.addAuthor(builder, authorOffset);
  NostrData.addKind(builder, kind);
  return NostrData.endNostrData(builder);
}

unpack(): NostrDataT {
  return new NostrDataT(
    this.id(),
    this.bb!.createScalarList<string>(this.relays.bind(this), this.relaysLength()),
    this.author(),
    this.kind()
  );
}


unpackTo(_o: NostrDataT): void {
  _o.id = this.id();
  _o.relays = this.bb!.createScalarList<string>(this.relays.bind(this), this.relaysLength());
  _o.author = this.author();
  _o.kind = this.kind();
}
}

export class NostrDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: ByteString|Uint8Array|null = null,
  public relays: (string)[] = [],
  public author: ByteString|Uint8Array|null = null,
  public kind: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const relays = NostrData.createRelaysVector(builder, builder.createObjectOffsetList(this.relays));
  const author = (this.author !== null ? builder.createString(this.author!) : 0);

  return NostrData.createNostrData(builder,
    id,
    relays,
    author,
    this.kind
  );
}
}
