import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { StringVec, StringVecT } from '../../nostr/fb/string-vec.js';


export class ZapRequest implements flatbuffers.IUnpackableObject<ZapRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ZapRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsZapRequest(bb:flatbuffers.ByteBuffer, obj?:ZapRequest):ZapRequest {
  return (obj || new ZapRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsZapRequest(bb:flatbuffers.ByteBuffer, obj?:ZapRequest):ZapRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ZapRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

kind():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

pubkey(): ByteString|null
pubkey(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
pubkey(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

content(): ByteString|null
content(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
content(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

tags(index: number, obj?:StringVec):StringVec|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new StringVec()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

signature(): ByteString|null
signature(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
signature(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startZapRequest(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addKind(builder:flatbuffers.Builder, kind:number) {
  builder.addFieldInt16(0, kind, 0);
}

static addPubkey(builder:flatbuffers.Builder, pubkeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, pubkeyOffset, 0);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, contentOffset, 0);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSignature(builder:flatbuffers.Builder, signatureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, signatureOffset, 0);
}

static endZapRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // pubkey
  builder.requiredField(offset, 8) // content
  builder.requiredField(offset, 10) // tags
  return offset;
}

static createZapRequest(builder:flatbuffers.Builder, kind:number, pubkeyOffset:flatbuffers.Offset, contentOffset:flatbuffers.Offset, tagsOffset:flatbuffers.Offset, signatureOffset:flatbuffers.Offset):flatbuffers.Offset {
  ZapRequest.startZapRequest(builder);
  ZapRequest.addKind(builder, kind);
  ZapRequest.addPubkey(builder, pubkeyOffset);
  ZapRequest.addContent(builder, contentOffset);
  ZapRequest.addTags(builder, tagsOffset);
  ZapRequest.addSignature(builder, signatureOffset);
  return ZapRequest.endZapRequest(builder);
}

unpack(): ZapRequestT {
  return new ZapRequestT(
    this.kind(),
    this.pubkey(),
    this.content(),
    this.bb!.createObjList<StringVec, StringVecT>(this.tags.bind(this), this.tagsLength()),
    this.signature()
  );
}


unpackTo(_o: ZapRequestT): void {
  _o.kind = this.kind();
  _o.pubkey = this.pubkey();
  _o.content = this.content();
  _o.tags = this.bb!.createObjList<StringVec, StringVecT>(this.tags.bind(this), this.tagsLength());
  _o.signature = this.signature();
}
}

export class ZapRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public kind: number = 0,
  public pubkey: ByteString|Uint8Array|null = null,
  public content: ByteString|Uint8Array|null = null,
  public tags: (StringVecT)[] = [],
  public signature: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const pubkey = (this.pubkey !== null ? builder.createString(this.pubkey!) : 0);
  const content = (this.content !== null ? builder.createString(this.content!) : 0);
  const tags = ZapRequest.createTagsVector(builder, builder.createObjectOffsetList(this.tags));
  const signature = (this.signature !== null ? builder.createString(this.signature!) : 0);

  return ZapRequest.createZapRequest(builder,
    this.kind,
    pubkey,
    content,
    tags,
    signature
  );
}
}
