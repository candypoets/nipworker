import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Eoce implements flatbuffers.IUnpackableObject<EoceT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Eoce {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEoce(bb:flatbuffers.ByteBuffer, obj?:Eoce):Eoce {
  return (obj || new Eoce()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEoce(bb:flatbuffers.ByteBuffer, obj?:Eoce):Eoce {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Eoce()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

subscriptionId(): ByteString|null
subscriptionId(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
subscriptionId(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startEoce(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSubscriptionId(builder:flatbuffers.Builder, subscriptionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, subscriptionIdOffset, 0);
}

static endEoce(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // subscription_id
  return offset;
}

static createEoce(builder:flatbuffers.Builder, subscriptionIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  Eoce.startEoce(builder);
  Eoce.addSubscriptionId(builder, subscriptionIdOffset);
  return Eoce.endEoce(builder);
}

unpack(): EoceT {
  return new EoceT(
    this.subscriptionId()
  );
}


unpackTo(_o: EoceT): void {
  _o.subscriptionId = this.subscriptionId();
}
}

export class EoceT implements flatbuffers.IGeneratedObject {
constructor(
  public subscriptionId: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const subscriptionId = (this.subscriptionId !== null ? builder.createString(this.subscriptionId!) : 0);

  return Eoce.createEoce(builder,
    subscriptionId
  );
}
}
