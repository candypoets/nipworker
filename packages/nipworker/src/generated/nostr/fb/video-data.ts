import { ByteString } from "src/lib/ByteString";
// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class VideoData implements flatbuffers.IUnpackableObject<VideoDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VideoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVideoData(bb:flatbuffers.ByteBuffer, obj?:VideoData):VideoData {
  return (obj || new VideoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVideoData(bb:flatbuffers.ByteBuffer, obj?:VideoData):VideoData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VideoData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

url(): ByteString|null
url(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
url(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

thumbnail(): ByteString|null
thumbnail(optionalEncoding:flatbuffers.Encoding): ByteString|Uint8Array|null
thumbnail(optionalEncoding?:any): ByteString|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__stringByteString(this.bb_pos + offset, optionalEncoding) : null;
}

static startVideoData(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addUrl(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, urlOffset, 0);
}

static addThumbnail(builder:flatbuffers.Builder, thumbnailOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, thumbnailOffset, 0);
}

static endVideoData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // url
  return offset;
}

static createVideoData(builder:flatbuffers.Builder, urlOffset:flatbuffers.Offset, thumbnailOffset:flatbuffers.Offset):flatbuffers.Offset {
  VideoData.startVideoData(builder);
  VideoData.addUrl(builder, urlOffset);
  VideoData.addThumbnail(builder, thumbnailOffset);
  return VideoData.endVideoData(builder);
}

unpack(): VideoDataT {
  return new VideoDataT(
    this.url(),
    this.thumbnail()
  );
}


unpackTo(_o: VideoDataT): void {
  _o.url = this.url();
  _o.thumbnail = this.thumbnail();
}
}

export class VideoDataT implements flatbuffers.IGeneratedObject {
constructor(
  public url: ByteString|Uint8Array|null = null,
  public thumbnail: ByteString|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const url = (this.url !== null ? builder.createString(this.url!) : 0);
  const thumbnail = (this.thumbnail !== null ? builder.createString(this.thumbnail!) : 0);

  return VideoData.createVideoData(builder,
    url,
    thumbnail
  );
}
}
